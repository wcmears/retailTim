import { gql } from '@apollo/client/core';
import { mapFacetToProductFilter } from '../helpers/mapFacetToProductFilter';
import { getCountry } from '../helpers';
const collectionQuery = gql `query collection($handle: String, $first: Int, $filters: [ProductFilter!], $country: CountryCode!) @inContext(country: $country ){
    collection(handle: $handle) {
      id
      handle
      title
      description
      descriptionHtml
      updatedAt
      image {
        src
        url
      }
      products(filters: $filters, first: $first) {
        edges {
          node {
            images(first: 1) {
              edges {
                node {
                  src
                  originalSrc
                  id
                  height
                  width
                  altText
                }
              }
            }
            totalInventory
            variants(first: 1) {
              edges {
                node {
                  id
                  price
                  availableForSale
                  compareAtPrice
                  priceV2{
                    amount
                    currencyCode
                  }
                  compareAtPriceV2{
                    amount
                    currencyCode
                  }
                }
              }
            }
            options {
              id
              name
              values
            }
            tags
            productType
            title
            vendor
            publishedAt
            createdAt
            updatedAt
            publishedAt
            id
            description
            descriptionHtml
            handle
          }
        }
      }
    }
  }
`;
export default async function getCollection(context, { categorySlug, itemsPerPage, filters }, customQuery) {
    const variables = {
        handle: categorySlug,
        first: itemsPerPage ?? 5,
        filters: mapFacetToProductFilter(filters),
        country: getCountry(context)
    };
    const { collection } = context.extendQuery(customQuery, {
        collection: {
            query: collectionQuery,
            variables
        }
    });
    const response = await context.client.apolloClient.query({
        query: collection.query,
        variables: collection.variables
    });
    return response ?? null;
}
//# sourceMappingURL=getCollection.js.map