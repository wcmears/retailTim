import express from 'express';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import consola from 'consola';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

/**
 * Resolves dependencies based on the current working directory, not relative to this package.
 */
function resolveDependency(name) {
    try {
        var path = require.resolve(name, { paths: [process.cwd()] });
        // eslint-disable-next-line global-require
        return require(path);
    }
    catch (error) {
        throw new Error("Could not resolve integration :".concat(name, "\""));
    }
}
function createRawExtensions(apiClient, integration) {
    var extensionsCreateFn = integration.extensions;
    var predefinedExtensions = apiClient.createApiClient._predefinedExtensions;
    return extensionsCreateFn
        ? extensionsCreateFn(predefinedExtensions)
        : predefinedExtensions;
}
function lookUpExternal(extension) {
    return typeof extension === 'string'
        ? resolveDependency(extension)
        : [extension];
}
function createExtensions(rawExtensions) {
    return rawExtensions.reduce(function (prev, curr) { return __spreadArray(__spreadArray([], prev, true), lookUpExternal(curr), true); }, []);
}
function registerIntegrations(app, integrations) {
    return Object.entries(integrations).reduce(function (prev, _a) {
        var _b;
        var tag = _a[0], integration = _a[1];
        consola.info("- Loading: ".concat(tag, " ").concat(integration.location));
        var apiClient = resolveDependency(integration.location);
        var rawExtensions = createRawExtensions(apiClient, integration);
        var extensions = createExtensions(rawExtensions);
        extensions.forEach(function (_a) {
            var name = _a.name, extendApp = _a.extendApp;
            consola.info("- Loading: ".concat(tag, " extension: ").concat(name));
            if (extendApp) {
                extendApp({ app: app, configuration: integration.configuration });
            }
        });
        consola.success("- Integration: ".concat(tag, " loaded!"));
        return __assign(__assign({}, prev), (_b = {}, _b[tag] = {
            apiClient: apiClient,
            extensions: extensions,
            configuration: integration.configuration,
            customQueries: integration.customQueries
        }, _b));
    }, {});
}

var STATUS_FIELDS = ['status', 'statusCode'];
function reduceStatus(narrowObject, depth) {
    return function (statusCode, c) {
        if (statusCode) {
            return statusCode;
        }
        if (STATUS_FIELDS.includes(c)) {
            return narrowObject[c];
        }
        var newDepth = depth + 1;
        return obtainStatusCode(narrowObject[c], newDepth);
    };
}
function obtainStatusCode(givenObject, depth) {
    if (depth === void 0) { depth = 1; }
    var obj = givenObject || {};
    if (depth > 3) {
        return;
    }
    return Object.keys(obj).reduce(reduceStatus(obj, depth), null);
}
function getAxiosStatusCode(error) {
    if (error === null || error === void 0 ? void 0 : error.isAxiosError) {
        return error.response.status;
    }
}
function getApolloStatusCode(error) {
    if (error === null || error === void 0 ? void 0 : error.networkError) {
        return 500;
    }
    if (error === null || error === void 0 ? void 0 : error.code) {
        return typeof error.code === 'string' ? 400 : error.code;
    }
}
function getAgnosticStatusCode(error) {
    return getAxiosStatusCode(error) ||
        getApolloStatusCode(error) ||
        obtainStatusCode(error) ||
        200;
}

var app = express();
app.use(express.json());
app.use(cookieParser());
app.use(cors());
function createServer(config) {
    var _this = this;
    consola.info('Middleware starting....');
    consola.info('Loading integrations...');
    var integrations = registerIntegrations(app, config.integrations);
    consola.success('Integrations loaded!');
    app.post('/:integrationName/:functionName', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
        var _a, integrationName, functionName, _b, apiClient, configuration, extensions, customQueries, middlewareContext, createApiClient, apiClientInstance, apiFunction, platformResponse, error_1;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = req.params, integrationName = _a.integrationName, functionName = _a.functionName;
                    _b = integrations[integrationName], apiClient = _b.apiClient, configuration = _b.configuration, extensions = _b.extensions, customQueries = _b.customQueries;
                    middlewareContext = { req: req, res: res, extensions: extensions, customQueries: customQueries };
                    createApiClient = apiClient.createApiClient.bind({ middleware: middlewareContext });
                    apiClientInstance = createApiClient(configuration);
                    apiFunction = apiClientInstance.api[functionName];
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, apiFunction.apply(void 0, req.body)];
                case 2:
                    platformResponse = _c.sent();
                    res.send(platformResponse);
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _c.sent();
                    res.status(getAgnosticStatusCode(error_1));
                    res.send(error_1);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    consola.success('Middleware created!');
    return app;
}

export { createServer };
//# sourceMappingURL=index.es.js.map
