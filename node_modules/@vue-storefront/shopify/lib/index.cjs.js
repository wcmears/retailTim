'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@vue-storefront/core');
var compositionApi = require('@nuxtjs/composition-api');

const params$a = {
    categorySearch: async (context, params) => {
        const { customQuery, ...searchParams } = params;
        return await context.$shopify.api.getCategory(searchParams, customQuery);
    }
};
var index$d = core.useCategoryFactory(params$a);

/* istanbul ignore file */
const PAYMENT_METHODS_MOCK = [
    {
        label: 'Visa Debit',
        value: 'debit'
    },
    {
        label: 'MasterCard',
        value: 'mastercard'
    },
    {
        label: 'Visa Electron',
        value: 'electron'
    },
    {
        label: 'Cash on delivery',
        value: 'cash'
    },
    {
        label: 'Check',
        value: 'check'
    }
];
const paymentMethods = compositionApi.ref(PAYMENT_METHODS_MOCK);
const shippingMethods = compositionApi.ref([]);
const personalDetails = compositionApi.ref({});
const shippingDetails = compositionApi.ref({});
const billingDetails = compositionApi.ref({});
const chosenPaymentMethod = compositionApi.ref('');
const chosenShippingMethod = compositionApi.ref({});
const placeOrder = async () => { };
// @todo CHECKOUT
const useCheckout = () => {
    return {
        paymentMethods,
        shippingMethods,
        personalDetails,
        shippingDetails,
        billingDetails,
        chosenPaymentMethod,
        chosenShippingMethod,
        placeOrder,
        loading: compositionApi.computed(() => false)
    };
};

exports.ContentType = void 0;
(function (ContentType) {
    ContentType["UpdatePreference"] = "updatePreferences";
    ContentType["Page"] = "page";
    ContentType["Blog"] = "blog";
    ContentType["Article"] = "article";
})(exports.ContentType || (exports.ContentType = {}));

const params$9 = {
    search: async (context, allParams) => {
        const { contentType, ...params } = allParams;
        const deprecatedApi = context.$shopify.api;
        switch (contentType) {
            case exports.ContentType.UpdatePreference:
                return deprecatedApi.updateNewsLetterPreferences(params);
            case exports.ContentType.Page: {
                const response = await context.$shopify.api.getPage(params);
                return response?.data?.page;
            }
            case exports.ContentType.Blog: {
                if (Object.prototype.hasOwnProperty.call(params, 'id') || Object.prototype.hasOwnProperty.call(params, 'handle')) {
                    const response = await context.$shopify.api.getBlog(params)
                        .catch(err => ({ error: err, data: null }));
                    if (response?.error)
                        throw response.error;
                    return response?.data?.blog;
                }
                const response = await context.$shopify.api.getBlogs(params)
                    .catch(err => ({ error: err, data: null }));
                if (response?.error)
                    throw response.error;
                return response?.data?.blogs;
            }
            case exports.ContentType.Article: {
                if (Object.prototype.hasOwnProperty.call(params, 'id') || Object.prototype.hasOwnProperty.call(params, 'handle')) {
                    const response = await context.$shopify.api.getArticle(params);
                    return response?.data?.article;
                }
                const response = await context.$shopify.api.getArticles(params);
                if (response.error)
                    throw response.error;
                return {
                    data: response?.data?.articles,
                    pageInfo: response?.pageInfo
                };
            }
            default: {
                return deprecatedApi.getBlogPosts(params);
            }
        }
    }
};
var index$c = core.useContentFactory(params$9);

function convertProductsGqlToLocal(data) {
    return data.edges.map(edge => ({
        ...edge.node,
        images: edge.node.images.edges.map(imageEdge => imageEdge.node),
        variants: edge.node.variants.edges.map(variantEdge => variantEdge.node)
    }));
}

const enhanceProduct = (productResponse) => {
    if (Object.keys(productResponse).length === 0)
        return [];
    let products = [];
    if (Array.isArray(productResponse)) {
        products = productResponse.filter(item => Object.keys(item).length !== 0);
    }
    const enhancedProductResponse = products.map((product) => ({
        ...product,
        name: product.title,
        images: product?.images,
        price: {
            original: product.variantBySelectedOptions && product.variantBySelectedOptions !== null ? product.variantBySelectedOptions?.compareAtPriceV2?.amount : product.variants ? product.variants?.[0].compareAtPriceV2?.amount : 0,
            current: product.variantBySelectedOptions && product.variantBySelectedOptions !== null ? product.variantBySelectedOptions?.priceV2?.amount : product.variants ? product.variants?.[0].priceV2?.amount : 0
        },
        available: product.variantBySelectedOptions && product.variantBySelectedOptions !== null ? product.variantBySelectedOptions?.quantityAvailable : product.variants ? product.variants?.[0].availableForSale : true,
        productType: product.productType,
        options: product.options,
        _id: product.id,
        variantId: product.variants ? product.variants?.[0].id : '',
        _description: product.description,
        _descriptionHtml: product.descriptionHtml,
        _categoriesRef: [],
        _slug: product.handle,
        _coverImage: product?.images?.[0] ?? '',
        _mainPrice: product.variants ? product.variants?.[0].priceV2?.amount : 0
    }));
    return enhancedProductResponse;
};

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const getSortedProducts = (productResponse, sortBy) => {
    let sortKey = '_id';
    if (sortBy === 'title(asc)' || sortBy === 'title(dsc)') {
        sortKey = 'name';
    }
    else if ((sortBy === 'price-up') || (sortBy === 'price-down')) {
        sortKey = '_mainPrice';
    }
    return productResponse.sort((a, b) => {
        const x = a[sortKey];
        const y = b[sortKey];
        if ((sortBy === 'price-down') || (sortBy === 'title(dsc)')) {
            return (((x < y) ? -1 : ((x > y) ? 1 : 0))) * -1;
        }
        return (((x < y) ? -1 : ((x > y) ? 1 : 0)));
    });
};

// TODO: move to the config file
const ITEMS_PER_PAGE = [20, 40, 100];
const factoryParams$1 = {
    search: async (context, params) => {
        // if (Object.keys(params.input.filters).length > 0) {
        const newContext = context;
        const collection = await newContext.$shopify.api.getCollection(params.input);
        const result = collection?.data?.collection;
        result.products = convertProductsGqlToLocal(result.products);
        const itemsPerPage = params.input.itemsPerPage;
        return {
            products: enhanceProduct(result.products),
            categories: result,
            total: result.products.length,
            perPageOptions: ITEMS_PER_PAGE,
            itemsPerPage
        };
    }
};
var index$b = core.useFacetFactory(factoryParams$1);

const params$8 = {
    productsSearch: async (context, params) => {
        const app = context.$shopify.config.app;
        // check if cart is already initiated
        const { customQuery, ...searchParams } = params;
        searchParams.localeInfo = { cur: app.i18n.locale, default: app.i18n.localeProperties.alias };
        return await context.$shopify.api.getProduct(searchParams, customQuery);
    }
};
var index$a = core.useProductFactory(params$8);

const params$7 = {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    searchReviews: async (context, params) => {
        console.log('Mocked: searchReviews');
        return {};
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    addReview: async (context, params) => {
        console.log('Mocked: addReview');
        return {};
    }
};
var index$9 = core.useReviewFactory(params$7);

const useSearchFactoryParams = {
    async search(context, params) {
        const response = await context.$shopify.api.searchProduct(params);
        return response;
    }
};

var index$8 = core.useSearchFactory(useSearchFactoryParams);

/* istanbul ignore file */
const params$6 = {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    load: async (context) => {
        // check for existing token, if yes user is logged in else logged out
        const app = context.$shopify.config.app;
        const appKey = app.$config.appKey;
        const token = app.$cookies.get(appKey + '_token');
        const result = await context.$shopify.api.fetchCustomer(token);
        let customer = null;
        if (result) {
            customer = result.customer;
            if (customer) {
                customer.token = token;
            }
            return customer;
        }
        return customer;
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    logOut: async (context) => {
        const app = context.$shopify.config.app;
        const appKey = app.$config.appKey;
        const token = app.$cookies.get(appKey + '_token');
        await context.$shopify.api.signOut(token).then(() => {
            app.$cookies.remove(appKey + '_token');
        });
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    updateUser: async (context, { currentUser, updatedUserData }) => {
        const app = context.$shopify.config.app;
        const appKey = app.$config.appKey;
        const token = app.$cookies.get(appKey + '_token');
        await context.$shopify.api.editProfile({
            token,
            profile: {
                email: updatedUserData.email ? updatedUserData.email : '',
                firstName: updatedUserData.firstName ? updatedUserData.firstName : '',
                lastName: updatedUserData.lastName ? updatedUserData.lastName : '',
                acceptsMarketing: updatedUserData.acceptsMarketing ? updatedUserData.acceptsMarketing : false,
                phone: updatedUserData.phone ? updatedUserData.phone : null
            }
        });
        return {};
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    register: async (context, { email, password, firstName, lastName }) => {
        const result = await context.$shopify.api.customerCreate({
            email,
            firstName,
            lastName,
            acceptsMarketing: false,
            password
        });
        const response = {
            token: 'SignUpSuccess',
            error: (result.customerUserErrors?.length) ? result.customerUserErrors[0].message : ''
        };
        return response;
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    logIn: async (context, { username, password }) => {
        if (username && !password) {
            const result = await context.$shopify.api.forgotPassword({ username });
            const response = {
                token: 'forgotPassword',
                error: result?.data?.customerRecover?.customerUserErrors[0]?.message || result?.errors?.[0]?.message || ''
            };
            return response;
        }
        const result = await context.$shopify.api.signIn({ username, password });
        const response = {
            token: (result.customerAccessToken) ? result.customerAccessToken.accessToken : null,
            error: (result.customerUserErrors.length) ? result.customerUserErrors[0].message : ''
        };
        // store token in cookie
        if (response.token !== null) {
            const app = context.$shopify.config.app;
            const appKey = app.$config.appKey;
            app.$cookies.set(appKey + '_token', response.token);
        }
        return response;
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    changePassword: async (context, { currentUser, currentPassword, newPassword }) => {
        const app = context.$shopify.config.app;
        const appKey = app.$config.appKey;
        let token = app.$cookies.get(appKey + '_token');
        const result = await context.$shopify.api.changePassword({ token, newPassword });
        token = result.customerUpdate.customerAccessToken.accessToken;
        // store updated user token
        if (token !== null) {
            app.$cookies.set(appKey + '_token', token);
        }
        return {};
    }
};
var index$7 = core.useUserFactory(params$6);

const params$5 = {
    async change() { },
    async load() { }
};
var index$6 = core.useStoreFactory(params$5);

const addresses$1 = [
    {
        id: 1,
        email: 'john@gmail.com',
        firstName: 'John',
        lastName: 'Doe',
        streetName: 'Warsawska',
        apartment: '24/193A',
        city: 'Phoenix',
        state: null,
        zipCode: '26-620',
        country: 'US',
        phoneNumber: '560123456',
        isDefault: true
    },
    {
        id: 2,
        email: 'havaka@gmail.com',
        firstName: 'Jonatan',
        lastName: 'Doe',
        streetName: 'Starachowicka',
        apartment: '20/193A',
        city: 'Atlanta',
        state: null,
        zipCode: '53-603',
        country: 'US',
        phoneNumber: '560123456',
        isDefault: false
    }
];
const billing = {
    addresses: addresses$1
};
// const findBiggestId = () => Math.random().toString().substr(2);
const disableOldDefault$1 = () => {
    const oldDefault = addresses$1.find(address => address.isDefault);
    if (oldDefault) {
        oldDefault.isDefault = false;
    }
};
const sortDefaultAtTop$1 = (a, b) => {
    if (a.isDefault) {
        return -1;
    }
    else if (b.isDefault) {
        return 1;
    }
    return 0;
};
const params$4 = {
    addAddress: async (context, params) => {
        const app = context.$shopify.config.app;
        const appKey = app.$config.appKey;
        const token = app.$cookies.get(appKey + '_token');
        const formatedAddress = {
            address1: params.address.streetName,
            address2: params.address.apartment,
            city: params.address.city,
            company: params.address.company,
            country: params.address.country,
            firstName: params.address.firstName,
            lastName: params.address.lastName,
            phone: params.address.phone,
            province: params.address.state,
            zip: params.address.postalCode
        };
        const result = await context.$shopify.api.addAddress({ token, address: formatedAddress });
        if (result) {
            if (result.customerUserErrors.length === 0) {
                return true;
            }
            return false;
        }
    },
    deleteAddress: async (context, params) => {
        const app = context.$shopify.config.app;
        const appKey = app.$config.appKey;
        const token = app.$cookies.get(appKey + '_token');
        const result = await context.$shopify.api.deleteAddress({ token, AddressId: params.address.id });
        if (result) {
            if (result.customerUserErrors.length === 0) {
                return true;
            }
            return false;
        }
    },
    updateAddress: async (context, params) => {
        const app = context.$shopify.config.app;
        const appKey = app.$config.appKey;
        const token = app.$cookies.get(appKey + '_token');
        const formatedAddress = {
            address1: params.address.streetName,
            address2: params.address.apartment,
            city: params.address.city,
            company: params.address.company,
            country: params.address.country,
            firstName: params.address.firstName,
            lastName: params.address.lastName,
            phone: params.address.phone,
            province: params.address.state,
            zip: params.address.postalCode
        };
        const result = await context.$shopify.api.updateAddress({ token, AddressId: params.address.id, address: formatedAddress });
        if (result) {
            if (result.customerUserErrors.length === 0) {
                return true;
            }
            return false;
        }
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    load: async (context, params) => {
        const app = context.$shopify.config.app;
        const appKey = app.$config.appKey;
        const token = app.$cookies.get(appKey + '_token');
        const result = await context.$shopify.api.fetchAddresses(token);
        let addresses = {};
        if (result) {
            addresses = result;
            return addresses;
        }
        return addresses;
    },
    setDefaultAddress: async (context, params) => {
        console.log('Mocked: setDefault');
        const isDefault = id => addresses$1[0].id === id;
        if (!isDefault(params.address.id)) {
            const indexToUpdate = addresses$1.findIndex(address => address.id === params.address.id);
            if (indexToUpdate < 0) {
                return Promise.reject(Error('This address does not exist'));
            }
            disableOldDefault$1();
            addresses$1[indexToUpdate].isDefault = true;
            addresses$1.sort(sortDefaultAtTop$1);
        }
        return Promise.resolve(billing);
    }
};
var index$5 = core.useUserBillingFactory(params$4);

/* istanbul ignore file */
const params$3 = {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    searchOrders: async (context, params) => {
        const app = context.$shopify.config.app;
        const appKey = app.$config.appKey;
        const token = app.$cookies.get(appKey + '_token');
        const result = await context.$shopify.api.fetchOrders(token);
        const orders = { data: [], total: 0 };
        if (result) {
            orders.data = result.customer.orders;
            orders.total = result.customer.orders.length;
            return orders;
        }
        return orders;
    }
};
var index$4 = core.useUserOrderFactory(params$3);

const addresses = [
    {
        id: 1,
        email: 'john@gmail.com',
        firstName: 'John',
        lastName: 'Doe',
        streetName: 'Warsawska',
        apartment: '24/193A',
        city: 'Phoenix',
        state: null,
        zipCode: '26-620',
        country: 'US',
        phoneNumber: '560123456',
        isDefault: true
    },
    {
        id: 2,
        email: 'havaka@gmail.com',
        firstName: 'Jonatan',
        lastName: 'Doe',
        streetName: 'Starachowicka',
        apartment: '20/193A',
        city: 'Atlanta',
        state: null,
        zipCode: '53-603',
        country: 'US',
        phoneNumber: '560123456',
        isDefault: false
    }
];
const shipping = {
    addresses
};
const findBiggestId = () => addresses.reduce((highest, { id }) => Math.max(highest, id), 0);
const disableOldDefault = () => {
    const oldDefault = addresses.find(address => address.isDefault);
    if (oldDefault) {
        oldDefault.isDefault = false;
    }
};
const sortDefaultAtTop = (a, b) => {
    if (a.isDefault) {
        return -1;
    }
    else if (b.isDefault) {
        return 1;
    }
    return 0;
};
const params$2 = {
    addAddress: async (context, params) => {
        const newAddress = {
            ...params.address,
            id: findBiggestId() + 1
        };
        if (params.address.isDefault) {
            disableOldDefault();
            addresses.unshift(newAddress);
        }
        else {
            addresses.push(newAddress);
        }
        return Promise.resolve(shipping);
    },
    deleteAddress: async (context, params) => {
        const indexToRemove = addresses.findIndex(address => address.id === params.address.id);
        if (indexToRemove < 0) {
            return Promise.reject(Error('This address does not exist'));
        }
        addresses.splice(indexToRemove, 1);
        return Promise.resolve(shipping);
    },
    updateAddress: async (context, params) => {
        const indexToUpdate = addresses.findIndex(address => address.id === params.address.id);
        if (indexToUpdate < 0) {
            return Promise.reject(Error('This address does not exist'));
        }
        const isNewDefault = params.address.isDefault && addresses[0].id !== params.address.id;
        if (isNewDefault) {
            disableOldDefault();
        }
        addresses[indexToUpdate] = params.address;
        if (isNewDefault) {
            addresses.sort(sortDefaultAtTop);
        }
        return Promise.resolve(shipping);
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    load: async (context, params) => {
        console.log('Mocked: load');
        return Promise.resolve(shipping);
    },
    setDefaultAddress: async (context, params) => {
        console.log('Mocked: setDefault');
        const isDefault = id => addresses[0].id === id;
        if (!isDefault(params.address.id)) {
            const indexToUpdate = addresses.findIndex(address => address.id === params.address.id);
            if (indexToUpdate < 0) {
                return Promise.reject(Error('This address does not exist'));
            }
            disableOldDefault();
            addresses[indexToUpdate].isDefault = true;
            addresses.sort(sortDefaultAtTop);
        }
        return Promise.resolve(shipping);
    }
};
var index$3 = core.useUserShippingFactory(params$2);

/* istanbul ignore file */
compositionApi.ref(null);
const params$1 = {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    load: async (context) => {
        console.log('Mocked: loadWishlist');
        return {};
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    addItem: async (context, { currentWishlist, product }) => {
        console.log('Mocked: addToWishlist');
        return {};
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    removeItem: async (context, { currentWishlist, product }) => {
        console.log('Mocked: removeFromWishlist');
        return {};
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    clear: async (context, { currentWishlist }) => {
        console.log('Mocked: clearWishlist');
        return {};
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isInWishlist: (context, { currentWishlist }) => {
        console.log('Mocked: isInWishlist');
        return false;
    }
};
var index$2 = core.useWishlistFactory(params$1);

/* istanbul ignore file */
const params = {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    load: async (context) => {
        // check if cart is already initiated
        const app = context.$shopify.config.app;
        const appKey = app.$config.appKey;
        let existingLocale = app.$cookies.get('cur-vsf-locale');
        let isLocaleSwitched = false;
        if (existingLocale === undefined || existingLocale === '' || existingLocale !== app.i18n.locale) {
            app.$cookies.set('cur-vsf-locale', app.i18n.locale);
            existingLocale = app.$cookies.get('cur-vsf-locale');
            isLocaleSwitched = true;
        }
        let existngCartId = app.$cookies.get(appKey + '_cart_id');
        if ((existngCartId === undefined || existngCartId === '' || isLocaleSwitched)) {
            // Initiate new cart
            existngCartId = await context.$shopify.api.createCart().then((checkout) => {
                app.$cookies.set(appKey + '_cart_id', checkout.id, { maxAge: 60 * 60 * 24 * 365, path: '/' });
                return checkout.id;
            });
        }
        const checkoutId = existngCartId;
        // Keep existing cart
        const plainResp = await context.$shopify.api.checkOut(checkoutId).then((checkout) => {
            // Do something with the checkout
            return checkout;
        });
        return JSON.parse(JSON.stringify(plainResp));
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    addItem: async (context, { currentCart, product, quantity, customQuery }) => {
        const app = context.$shopify.config.app;
        const appKey = app.$config.appKey;
        return await context.$shopify.api.addToCart({ currentCart, product, quantity, customQuery }).then((checkout) => {
            // store cart id
            if (!app.$cookies.get(appKey + '_cart_id', currentCart.id)) {
                app.$cookies.set(appKey + '_cart_id', currentCart.id, { maxAge: 60 * 60 * 24 * 365, path: '/' });
            }
            return JSON.parse(JSON.stringify(checkout));
        });
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    removeItem: async (context, { currentCart, product, customQuery }) => {
        // Remove an item from the checkout
        return await context.$shopify.api.removeFromCart({ currentCart, product }).then((checkout) => {
            // return updated cart data
            return JSON.parse(JSON.stringify(checkout));
        });
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    updateItemQty: async (context, { currentCart, product, quantity, customQuery }) => {
        // Update an item Quantity
        return await context.$shopify.api.updateCart({ currentCart, product, quantity }).then((checkout) => {
            // return updated cart data
            return JSON.parse(JSON.stringify(checkout));
        });
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    clear: async (context, { currentCart }) => {
        return {};
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    applyCoupon: async (context, { currentCart, couponCode, customQuery }) => {
        return await context.$shopify.api.applyCoupon({ currentCart, couponCode, customQuery }).then((checkout) => {
            // return updated checkout data
            return {
                updatedCart: JSON.parse(JSON.stringify(checkout.checkout))
            };
        });
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    removeCoupon: async (context, { currentCart, couponCode, customQuery }) => {
        return await context.$shopify.api.removeCoupon({ currentCart, couponCode, customQuery }).then((checkout) => {
            // return updated checkout data
            return {
                updatedCart: JSON.parse(JSON.stringify(checkout.checkout))
            };
        });
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isInCart: (context, { currentCart, product }) => {
        const getBasketItemByProduct = ({ currentCart, product }) => {
            if (product) {
                let variantId;
                if (product && product.variantBySelectedOptions && product.variantBySelectedOptions !== null) {
                    variantId = product.variantBySelectedOptions.id;
                }
                if (product.variants) {
                    variantId = product.variants[0].id;
                }
                if (product.barcodes) {
                    // handle & convert plain product Id from BCapp to base64
                    const variationIDPlain = 'gid://shopify/ProductVariant/' + variantId;
                    const buff = Buffer.from(variationIDPlain);
                    variantId = buff.toString('base64');
                }
                return currentCart?.lineItems?.find?.((item) => item.variant.id === variantId);
            }
            return false;
        };
        return Boolean(currentCart && getBasketItemByProduct({ currentCart, product }));
    }
};
var index$1 = core.useCartFactory(params);

const factoryParams = {
    resetPassword: async (context, { email }) => {
        const response = await context.$shopify.api.customerRecover({
            email
        });
        return response;
    },
    setNewPassword: async (context, { tokenValue, newPassword, customQuery }) => {
        console.log('Mocked: setNewPassword');
        return {};
    }
};
var index = core.useForgotPasswordFactory(factoryParams);

function useAvailableFilters() {
    core.useVSFContext();
    return {
        async load() {
            // console.log(await context.$shopify.api.availableFilters({
            //   handle: 'clothes'
            // }))
        }
    };
}

function useAvailableCountries() {
    const context = core.useVSFContext();
    const countries = compositionApi.ref([]);
    return {
        async load() {
            const _countries = await context.$shopify.api.availableCountries();
            countries.value = _countries;
        },
        countries
    };
}

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const formatAttributeList = (attributes) => attributes.map((attr) => {
    return {
        name: attr.name,
        value: attr.values,
        label: attr.name
    };
});
const formatSelectedAttributeList = (attributes) => attributes.map((attr) => {
    return {
        name: attr.name,
        value: attr.value,
        label: attr.name
    };
});
const capitalize = (s) => {
    if (typeof s !== 'string')
        return '';
    return s.charAt(0).toUpperCase() + s.slice(1);
};

const getCartItems = (cart) => {
    return cart.lineItems;
};
const getCartItemName = (product) => product?.title || 'Product\'s name';
const getCartItemId = (product) => product.id || '0';
const getCartItemSlug = (product) => {
    return product.slug || '0';
};
const getCartItemImage = (product) => {
    if (product.variant && product?.variant?.image !== null) {
        const imgPath = product?.variant?.image?.src.substring(0, product?.variant.image.src.lastIndexOf('.'));
        const imgext = product?.variant?.image?.src.split('.').pop();
        const cartImg = imgPath + '_120x120.' + imgext;
        return cartImg;
    }
    return '';
};
const getCartItemPrice = (product) => {
    return {
        regular: product?.variant?.compareAtPriceV2?.amount || null,
        special: product?.variant?.priceV2?.amount || null
    };
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getCartItemQty = (product) => product?.quantity;
const getCartItemAttributes = (product) => {
    const formatAttedattributeList = formatSelectedAttributeList(product?.variant.selectedOptions);
    if (formatAttedattributeList.length) {
        const attribArr = [];
        formatAttedattributeList.forEach((attr) => {
            attribArr[attr.name] = attr.value;
        });
        return { ...attribArr };
    }
    return {};
};
const getCartItemSku = (product) => product?.variant.sku || '-';
const getCartTotals = (cart) => {
    if (cart && cart !== null) {
        return {
            total: parseFloat(cart.totalPriceV2?.amount),
            subtotal: parseFloat(cart.subtotalPriceV2?.amount),
            special: parseFloat(cart.subtotalPriceV2?.amount),
        };
    }
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getCartShippingPrice = (cart) => 0;
const getCartSubTotal = (cart) => cart.lineItemsSubtotalPrice || 0;
const getcheckoutURL = (cart) => cart.webUrl || '';
const getCartTotalItems = (cart) => cart?.lineItems?.length > 0 ? cart.lineItems.reduce((n, { quantity }) => n + quantity, 0) : 0;
const getCartTotalDiscount = (cart) => cart?.discountApplications.length > 0 ? cart.discountApplications[0].value : 0;
const getAppliedCoupon = (cart) => cart?.discountApplications.length > 0 ? cart.discountApplications[0].code : '';
const getFormattedPrice$4 = (price) => String(price);
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getCoupons = (cart) => [];
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getDiscounts = (cart) => [];
const cartGetters = {
    getTotals: getCartTotals,
    getShippingPrice: getCartShippingPrice,
    getItems: getCartItems,
    getItemName: getCartItemName,
    getItemImage: getCartItemImage,
    getItemId: getCartItemId,
    getItemSlug: getCartItemSlug,
    getItemPrice: getCartItemPrice,
    getItemQty: getCartItemQty,
    getItemAttributes: getCartItemAttributes,
    getItemSku: getCartItemSku,
    getFormattedPrice: getFormattedPrice$4,
    getTotalItems: getCartTotalItems,
    getTotalDiscount: getCartTotalDiscount,
    getcheckoutURL,
    getSubTotal: getCartSubTotal,
    getCoupon: getAppliedCoupon,
    getCoupons,
    getDiscounts
};

const itemToTree = (category) => {
    return {
        label: category.title,
        slug: category.handle,
        items: [],
        isCurrent: false
    };
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getCategoryTree$1 = (category) => {
    if (category) {
        return itemToTree(category);
    }
    return {};
};
const categoryGetters = {
    getTree: getCategoryTree$1
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getShippingMethodId = (shippingMethod) => '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getShippingMethodName = (shippingMethod) => '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getShippingMethodDescription = (shippingMethod) => '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getShippingMethodPrice = (shippingMethod) => 0;
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const getFormattedPrice$3 = (price) => String(price);
const checkoutGetters = {
    getShippingMethodId,
    getShippingMethodName,
    getShippingMethodDescription,
    getFormattedPrice: getFormattedPrice$3,
    getShippingMethodPrice
};

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
const buildBreadcrumbsList = (rootCat, bc) => {
    const newBc = [...bc, { text: rootCat.title, link: rootCat.handle }];
    return rootCat.parent ? buildBreadcrumbsList(rootCat.parent, newBc) : newBc;
};
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const buildBreadcrumbs = (rootCat) => buildBreadcrumbsList(rootCat, [])
    .reverse()
    .reduce((prev, curr, index) => ([
    ...prev,
    { ...curr, link: `${prev[index - 1]?.link || ''}/${curr.link}` }
]), []);
const filterFacets = criteria => f => criteria ? criteria.includes(f) : true;
const createFacetsFromOptions = (facets, filters, filterKey) => {
    const options = facets[filterKey]?.options || [];
    const selectedList = filters && filters[filterKey] ? filters[filterKey] : [];
    return options
        .map(({ label, value }) => ({
        type: 'attribute',
        id: label,
        attrName: filterKey,
        value,
        selected: selectedList.includes(value),
        count: null
    }));
};
const reduceForFacets = (facets, filters) => (prev, curr) => ([
    ...prev,
    ...createFacetsFromOptions(facets, filters, curr)
]);
const buildFacets = (searchData, reduceFn, criteria) => {
    if (!searchData?.data) {
        return [];
    }
    const { data: { facets }, input: { filters } } = searchData;
    return Object.keys(facets)
        .filter(filterFacets(criteria))
        .reduce(reduceFn(facets, filters), []);
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getAll = (searchData, criteria) => buildFacets(searchData, reduceForFacets, criteria);
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const getGrouped = (searchData, criteria) => [];
// buildFacets(searchData, reduceForGroupedFacets, criteria);
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const getSortOptions = (searchData) => {
    const options = [
        { type: 'sort', id: 'latest', value: 'Latest', count: null },
        { type: 'sort', id: 'title(asc)', value: 'Title: A to Z', count: null },
        { type: 'sort', id: 'title(dsc)', value: 'Title: Z to A', count: null },
        { type: 'sort', id: 'price-up', value: 'Price: Low to high', count: null },
        { type: 'sort', id: 'price-down', value: 'Price: High to low', count: null }
    ].map(o => ({ ...o, selected: o.id === searchData.input.sort }));
    const selected = options.find(o => o.id === searchData.input.sort)?.id || 'latest';
    return { options, selected };
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getCategoryTree = (searchData) => {
    if (!searchData.data) {
        return [];
    }
    const allCats = searchData.data.categories;
    const formattedCats = [];
    for (let c = 0; c < allCats.length; c++) {
        formattedCats.push(getCategoryTree$1(searchData.data.categories[c]));
    }
    return formattedCats;
};
const identifyCurrentCat = (searchData) => {
    if (searchData.input === null) {
        return 0;
    }
    // fetch curren category slug
    const curCategoryPage = searchData.input.categorySlug;
    const allCategories = searchData.data.categories;
    let curCatIndex = 0;
    // fetch index from category array to generate link and title
    for (let i = 0; i < allCategories.length; i++) {
        // eslint-disable-next-line dot-notation
        if (allCategories[i]['handle'] === curCategoryPage) {
            curCatIndex = i;
            break;
        }
    }
    return curCatIndex;
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getProducts = (searchData) => {
    if (searchData.input === null || searchData.data === null) {
        return [];
    }
    let catProducts = [];
    const sortBy = searchData.input.sort;
    if (!Array.isArray(searchData.data.categories)) {
        catProducts = getSortedProducts(enhanceProduct(searchData.data.categories.products), sortBy);
    }
    else {
        const curCatIndex = identifyCurrentCat(searchData);
        catProducts = getSortedProducts(enhanceProduct(searchData.data.categories[curCatIndex].products), sortBy);
    }
    const products = enhanceProduct(catProducts);
    return products;
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getPagination = (searchData) => {
    if (!searchData.data) {
        return {};
    }
    return {
        currentPage: searchData.input.page,
        totalPages: Math.ceil(searchData.data.categories.products.length / searchData.data.itemsPerPage),
        totalItems: searchData.data.categories.products.length,
        itemsPerPage: searchData.input.itemsPerPage,
        pageOptions: searchData.data.perPageOptions
    };
};
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const getCurrentPage = (searchData) => {
    return searchData?.input?.page || 1;
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getBreadcrumbs$1 = (searchData) => {
    if (!searchData.data) {
        return [];
    }
    return [
        { text: 'Home', link: '/' },
        ...buildBreadcrumbs(searchData.data.categories).map(b => ({ ...b, link: `/c${b.link}` }))
    ];
};
const facetGetters = {
    getCurrentPage,
    getSortOptions,
    getGrouped,
    getAll,
    getProducts,
    getCategoryTree,
    getBreadcrumbs: getBreadcrumbs$1,
    getPagination
};

const getProductName = (product) => product?.name || undefined;
const getFullProductName = (product) => {
    if (product?.variantBySelectedOptions) {
        return `${product.name} - ${product.variantBySelectedOptions.title}`;
    }
    else {
        return `${product.name} - ${product.variants?.[0]?.title ?? ''}`;
    }
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getProductSlug = (product) => {
    if (product) {
        return product._slug;
    }
};
const getProductPrice = (product) => {
    return {
        regular: product?.price?.original || 0,
        special: product?.price?.current || 0
    };
};
const getProductDiscountPercentage = (product) => {
    const regular = parseFloat(product?.price?.original) || 0;
    const special = parseFloat(product?.price?.current) || 0;
    if (special < regular) {
        const discount = regular - special;
        const discountPercentage = (discount / regular) * 100;
        return Math.round(discountPercentage);
    }
    return 0;
};
const getProductGallery = (product) => (product ? product.images : [])
    .map((image) => {
    const imgPath = image.originalSrc.substring(0, image.originalSrc.lastIndexOf('.'));
    const imgext = image.originalSrc.split('.').pop();
    const imgSmall = imgPath + '_160x160.' + imgext;
    const imgBig = imgPath + '_295x295.' + imgext;
    const imgNormal = imgPath + '_600x600.' + imgext;
    return ({
        small: imgSmall,
        big: imgBig,
        normal: imgNormal
    });
});
const getActiveVariantImage = (product) => {
    if (product) {
        let productImg = product._coverImage.originalSrc;
        if (product.variantBySelectedOptions && product.variantBySelectedOptions !== null)
            productImg = product.variantBySelectedOptions.image.originalSrc;
        for (let i = 1; i < (product.images).length; i++) {
            if (product.images[i].originalSrc === productImg) {
                return i;
            }
        }
    }
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getProductFiltered = (products, _filters = {}) => {
    if (!products) {
        return [];
    }
    products = Array.isArray(products) ? products : [products];
    return (Object.keys(products).length > 0 ? enhanceProduct(products) : []);
};
const getFilteredSingle = (product) => {
    if (!product) {
        return [];
    }
    product = Array.isArray(product) ? product : [product];
    return enhanceProduct(product);
};
const getSelectedVariant = (attribs) => {
    return attribs;
};
const getProductOptions = (product) => {
    const productOptions = product.options;
    return productOptions;
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getProductAttributes = (products, filterByAttributeName) => {
    const isSingleProduct = !Array.isArray(products);
    const productList = (isSingleProduct ? [products] : products);
    if (!products || productList.length === 0) {
        return {};
    }
    const formatAttributes = (product) => {
        return formatAttributeList(product.options).filter((attribute) => filterByAttributeName ? filterByAttributeName.includes(attribute.name) : attribute);
    };
    const reduceToUniques = (prev, curr) => {
        const isAttributeExist = prev.some((el) => el.name === curr.name && el.value === curr.value);
        if (!isAttributeExist) {
            return [...prev, curr];
        }
        return prev;
    };
    const reduceByAttributeName = (prev, curr) => ({
        ...prev,
        [capitalize(curr.name)]: isSingleProduct ? curr.value : [
            ...(prev[curr.name] || []),
            {
                value: curr.value,
                label: curr.label
            }
        ]
    });
    return productList
        .map((product) => formatAttributes(product))
        .reduce((prev, curr) => [...prev, ...curr], [])
        .reduce(reduceToUniques, [])
        .reduce(reduceByAttributeName, {});
};
const getProductDescription = (product, isWantHtml) => {
    if (product) {
        if (isWantHtml) {
            return product._descriptionHtml;
        }
        return product._description;
    }
};
const getProductCategoryIds = (product) => product?._categoriesRef || '';
const getProductVariantId = (product) => product?.variants[0].id || '';
const getProductId = (product) => product?._id || '';
const getProductOriginalId = (product) => {
    if (product && product?._id) {
        const buff = Buffer.from(product?._id, 'base64');
        const decodedId = buff.toString('ascii');
        const extractedInfo = decodedId.split(/[\s/]+/).pop();
        return extractedInfo;
    }
    return '';
};
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const getFormattedPrice$2 = (price) => String(price);
const getProductSaleStatus = (product) => {
    if (product && (product.availableForSale)) {
        return true;
    }
    return false;
};
const getProductCoverImage = (product, size = 'normal') => {
    let imgResolution = '600x600';
    if (size === 'medium') {
        imgResolution = '295x295';
    }
    else if (size === 'small') {
        imgResolution = '80x80';
    }
    if (product && product._coverImage && product._coverImage.src) {
        const imgPath = product._coverImage.src.substring(0, product._coverImage.src.lastIndexOf('.'));
        const imgext = product._coverImage.src.split('.').pop();
        const resizedImg = imgPath + '_' + imgResolution + '.' + imgext;
        return resizedImg;
    }
    return 'https://cdn.shopify.com/s/files/1/0407/1902/4288/files/placeholder_' + imgResolution + '.jpg?v=1625742127';
};
const getProductCollections = (product, field = 'all') => {
    if (!product) {
        return;
    }
    if (product.collections && Object.keys(product.collections).length > 0) {
        const collections = [];
        Object.values(product.collections).forEach((collection) => {
            if (field === 'all') {
                collections.push({
                    id: collection.id,
                    title: collection.title,
                    slug: collection.handle
                });
            }
            else {
                collections.push(collection[field]);
            }
        });
        return collections;
    }
    return [];
};
const getPDPProductCoverImage = (product, size = 'normal') => {
    let imgResolution = '600x600';
    if (size === 'medium') {
        imgResolution = '295x295';
    }
    else if (size === 'small') {
        imgResolution = '80x80';
    }
    if (product && product._coverImage && product._coverImage.originalSrc) {
        const imgPath = product._coverImage.originalSrc.substring(0, product._coverImage.originalSrc.lastIndexOf('.'));
        const imgext = product._coverImage.originalSrc.split('.').pop();
        const resizedImg = imgPath + '_' + imgResolution + '.' + imgext;
        return resizedImg;
    }
    return 'https://cdn.shopify.com/s/files/1/0407/1902/4288/files/placeholder_' + imgResolution + '.jpg?v=1625742127';
};
const getProductStockStatus = (product) => {
    if (product && product.variantBySelectedOptions && product.variantBySelectedOptions !== null) {
        if (product.variantBySelectedOptions.quantityAvailable > 0) {
            return true;
        }
        return false;
    }
    else if (product && product.totalInventory > 0) {
        return true;
    }
    return false;
};
const getProductStock = (product) => {
    if (product && product.variantBySelectedOptions && product.variantBySelectedOptions !== null) {
        return product.variantBySelectedOptions.quantityAvailable;
    }
    else if (product && product.totalInventory) {
        return product.totalInventory;
    }
    return 0;
};
const getBreadcrumbs = (product) => {
    const breadCrumbs = [
        {
            text: 'Home',
            route: {
                link: '/'
            }
        }
    ];
    if (product && product.productType) {
        breadCrumbs.push({
            text: product.productType,
            route: {
                link: '#'
            }
        });
    }
    if (product && product.name) {
        breadCrumbs.push({
            text: getProductName(product),
            route: {
                link: '#'
            }
        });
    }
    return breadCrumbs;
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getProductTotalReviews = (product) => 0;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getProductAverageRating = (product) => 0;
const productGetters = {
    getName: getProductName,
    getFullName: getFullProductName,
    getSlug: getProductSlug,
    getPrice: getProductPrice,
    getGallery: getProductGallery,
    getCoverImage: getProductCoverImage,
    getCollections: getProductCollections,
    getVariantImage: getActiveVariantImage,
    getFiltered: getProductFiltered,
    getDiscountPercentage: getProductDiscountPercentage,
    getFilteredSingle,
    getProductOriginalId,
    getOptions: getProductOptions,
    getAttributes: getProductAttributes,
    getDescription: getProductDescription,
    getCategoryIds: getProductCategoryIds,
    getId: getProductId,
    getPDPCoverImage: getPDPProductCoverImage,
    getVariantId: getProductVariantId,
    getSaleStatus: getProductSaleStatus,
    getStockStatus: getProductStockStatus,
    getStock: getProductStock,
    getFormattedPrice: getFormattedPrice$2,
    getTotalReviews: getProductTotalReviews,
    getAverageRating: getProductAverageRating,
    getBreadcrumbs,
    getSelectedVariant
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getItems$1 = (review) => [];
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getReviewId = (item) => '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getReviewAuthor = (item) => '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getReviewMessage = (item) => '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getReviewRating = (item) => 0;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getReviewDate = (item) => '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getTotalReviews = (review) => 0;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getAverageRating = (review) => 0;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getRatesCount = (review) => [];
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getReviewsPage = (review) => 1;
const reviewGetters = {
    getItems: getItems$1,
    getReviewId,
    getReviewAuthor,
    getReviewMessage,
    getReviewRating,
    getReviewDate,
    getTotalReviews,
    getAverageRating,
    getRatesCount,
    getReviewsPage
};

/* istanbul ignore file */
const getUserFirstName = (user) => {
    if (user) {
        return user?.firstName || '';
    }
    return '';
};
const getUserLastName = (user) => {
    if (user) {
        return user?.lastName || '';
    }
    return '';
};
const getUserFullName = (user) => user ? `${user.firstName} ${user.lastName}` : '';
const getUserEmailAddress = (user) => user?.email || '';
const getAcceptsMarketingStatus = (user) => {
    if (user) {
        return user?.acceptsMarketing || false;
    }
    return false;
};
const getUserCleanId = (user) => {
    if (user && user.id) {
        const buff = Buffer.from(user.id, 'base64');
        const decodedId = buff.toString('ascii');
        const extractedInfo = decodedId.split(/[\s/]+/).pop();
        return extractedInfo;
    }
    return '';
};
const getUserToken = (user) => user?.token || '';
const getUserTags = (user) => {
    if (user && user.tags && user.tags.length > 0) {
        const tagsList = (user?.tags).map((tag) => {
            return tag.value;
        });
        return JSON.stringify(tagsList) || '';
    }
    return '';
};
const getUserPhone = (user) => user?.phone || '';
const getUserdisplayName = (user) => user?.displayName || '';
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const getUserdefaultAddress = (user) => {
    return user?.defaultAddress || '';
};
const userGetters$2 = {
    getFirstName: getUserFirstName,
    getLastName: getUserLastName,
    getFullName: getUserFullName,
    getEmailAddress: getUserEmailAddress,
    getdisplayName: getUserdisplayName,
    getPhone: getUserPhone,
    getdefaultAddress: getUserdefaultAddress,
    getTags: getUserTags,
    getToken: getUserToken,
    getCleanID: getUserCleanId,
    AcceptsMarketingStatus: getAcceptsMarketingStatus
};

const searchGetters = {
    getItems(result) {
        if (result.error) {
            throw new Error(result.error.message);
        }
        if (!result.data) {
            return [];
        }
        let items = result.data.products.edges.map(item => {
            const product = {
                ...item.node,
                images: item.node.images.edges.map(image => image.node),
                variants: item.node.variants.edges.map(variant => variant.node)
            };
            return product;
        });
        items = enhanceProduct(items);
        return items;
    },
    getCategoryTree(_) {
        throw new Error('Function not implemented.');
    },
    getPagination(_) {
        throw new Error('Function not implemented.');
    },
    getItemPrice(_) {
        throw new Error('Function not implemented.');
    },
    getSortOptions(_) {
        throw new Error('Function not implemented.');
    },
    getBreadcrumbs(_) {
        throw new Error('Function not implemented.');
    },
    getItemImages(_) {
        throw new Error('Function not implemented.');
    },
    getFilters(_) {
        throw new Error('Function not implemented.');
    },
    getItemName(_) {
        throw new Error('Function not implemented.');
    },
    getItemId(_) {
        throw new Error('Function not implemented.');
    },
    getItemSlug(_) {
        throw new Error('Function not implemented.');
    }
};

const userGetters$1 = {
    getAddresses: (shipping, criteria) => {
        const { addresses } = shipping;
        if (!criteria || !Object.keys(criteria).length) {
            return addresses;
        }
        const entries = Object.entries(criteria);
        return shipping.addresses.filter(address => entries.every(([key, value]) => address[key] === value));
    },
    getDefault: shipping => shipping.addresses.find(address => address.isDefault),
    getTotal: shipping => shipping.addresses.length,
    getPostCode: address => address ? address.zipCode : '',
    getStreetName: address => address ? address.streetName : '',
    getStreetNumber: address => address ? address.streetNumber : '',
    getCity: address => address ? address.city : '',
    getFirstName: address => address ? address.firstName : '',
    getLastName: address => address ? address.lastName : '',
    getCountry: address => address ? address.country : '',
    getPhone: address => address ? address.phoneNumber : '',
    getEmail: address => address ? address.email : '',
    getProvince: address => address ? address.state : '',
    getCompanyName: address => address ? address.company : '',
    getTaxNumber: address => address ? address.taxId : '',
    getId: address => address ? address.id : '',
    getApartmentNumber: address => address ? address.apartment : '',
    isDefault: address => address ? address.isDefault : false
};

const userGetters = {
    getAddresses: (billing, criteria) => {
        const { addresses } = billing;
        if (!criteria || !Object.keys(criteria).length) {
            return addresses;
        }
        const entries = Object.entries(criteria);
        return billing.addresses.filter(address => entries.every(([key, value]) => address[key] === value));
    },
    getDefault: billing => billing.addresses.find(address => address.isDefault),
    getTotal: billing => billing.addresses.length,
    getPostCode: address => address ? address.zipCode : '',
    getStreetName: address => address ? address.streetName : '',
    getStreetNumber: address => address ? address.apartment : '',
    getCity: address => address ? address.city : '',
    getFirstName: address => address ? address.firstName : '',
    getLastName: address => address ? address.lastName : '',
    getCountry: address => address ? address.country : '',
    getPhone: address => address ? address.phoneNumber : '',
    getEmail: address => address ? address.email : '',
    getProvince: address => address ? address.state : '',
    getCompanyName: address => address ? address.company : '',
    getTaxNumber: address => address ? address.taxId : '',
    getId: address => address ? address.id : '',
    getApartmentNumber: address => address ? address.apartment : '',
    isDefault: address => address ? address.isDefault : false
};

/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* istanbul ignore file */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getDate = (order) => {
    const monthsArray = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    const OrderDate = new Date(order?.processedAt);
    return monthsArray[OrderDate.getMonth()] + ' ' + OrderDate.getDate() + ', ' + OrderDate.getFullYear() + ' at ' + OrderDate.getHours() + ':' + OrderDate.getMinutes();
};
const getTracking = (order) => {
    if (order.fulfillmentStatus === 'FULFILLED' && order.successfulFulfillments[0].trackingInfo.length > 0) {
        return order.successfulFulfillments[0].trackingInfo[0].number;
    }
    return ' - ';
};
const getTrackingUrl = (order) => {
    if (order.fulfillmentStatus === 'FULFILLED' && order.successfulFulfillments[0].trackingInfo.length > 0) {
        return order.successfulFulfillments[0].trackingInfo[0].url;
    }
    return '';
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getId = (order) => order?.orderNumber || '123';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getStatus = (order) => order?.fulfillmentStatus || 'Failed';
const getPaymentStatus = (order) => order?.financialStatus || 'Pending';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getPrice = (order) => order.currentTotalPrice.amount || 0;
const getSubtotalPrice = (order) => order.currentSubtotalPrice.amount || 0;
const getTaxPrice = (order) => order.currentTotalTax.amount || 0;
const getShippingPrice = (order) => order.totalShippingPriceV2.amount || 0;
const getShippingAddress = (order) => {
    if (order.shippingAddress) {
        return order?.shippingAddress?.formatted || 'No shipping address available';
    }
    return 'No shipping address available';
};
const getCustomerName = (order) => order?.shippingAddress?.name || ' - ';
const getCustomerPhone = (order) => order?.shippingAddress?.phone || '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getItems = (order) => order.lineItems || [];
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getItemSku = (item) => item?.variant.sku || '-';
const getItemImage = (item) => {
    if (item && item?.variant.image) {
        const imgPath = item?.variant.image.originalSrc.substring(0, item?.variant.image.originalSrc.lastIndexOf('.'));
        const imgext = item?.variant.image.originalSrc.split('.').pop();
        const resizedImg = imgPath + '_100x100.' + imgext;
        return resizedImg;
    }
    return 'https://cdn.shopify.com/s/files/1/0102/2866/2368/files/placeholder-pdc_100x100.png?v=1621945081';
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getItemName = (item) => item?.title || 0;
const getItemId = (item) => item?.variant.product.id || '';
const getItemSlug = (item) => item?.variant.product.handle || '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getItemQty = (item) => item?.quantity || 0;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getItemPrice = (item) => item?.originalTotalPrice?.amount || 0;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getFormattedPrice$1 = (price) => String(price);
// eslint-disable-next-line
function getOrdersTotal(orders) {
    return 1;
}
const orderGetters = {
    getDate,
    getTracking,
    getTrackingUrl,
    getCustomerName,
    getCustomerPhone,
    getShippingAddress,
    getId,
    getStatus,
    getPaymentStatus,
    getPrice,
    getShippingPrice,
    getItems,
    getItemSku,
    getItemName,
    getItemQty,
    getItemPrice,
    getItemImage,
    getFormattedPrice: getFormattedPrice$1,
    getSubtotalPrice,
    getTaxPrice,
    getItemId,
    getItemSlug,
    getOrdersTotal
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getWishlistItems = (wishlist) => [
    {
        _id: 1,
        _description: 'Some description',
        _categoriesRef: [
            '1',
            '2'
        ],
        name: 'Black jacket',
        sku: 'black-jacket',
        images: [
            'https://s3-eu-west-1.amazonaws.com/commercetools-maximilian/products/081223_1_large.jpg'
        ],
        price: {
            original: 12.34,
            current: 10.00
        },
        qty: 1
    }
];
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getWishlistItemName = (product) => product?.name || 'Product\'s name';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getWishlistItemImage = (product) => product?.images[0] || 'https://s3-eu-west-1.amazonaws.com/commercetools-maximilian/products/081223_1_large.jpg';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getWishlistItemPrice = (product) => {
    return {
        regular: product?.price?.original || 12,
        special: product?.price?.current || 10
    };
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getWishlistItemQty = (product) => 1;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getWishlistItemAttributes = (product, filterByAttributeName) => ({ color: 'red' });
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getWishlistItemSku = (product) => product?.sku || 'some-sku';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getWishlistTotals = (wishlist) => {
    return {
        total: 10,
        subtotal: 10
    };
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getWishlistShippingPrice = (wishlist) => 0;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getWishlistTotalItems = (wishlist) => 1;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getFormattedPrice = (price) => String(price);
const wishlistGetters = {
    getTotals: getWishlistTotals,
    getShippingPrice: getWishlistShippingPrice,
    getItems: getWishlistItems,
    getItemName: getWishlistItemName,
    getItemImage: getWishlistItemImage,
    getItemPrice: getWishlistItemPrice,
    getItemQty: getWishlistItemQty,
    getItemAttributes: getWishlistItemAttributes,
    getItemSku: getWishlistItemSku,
    getTotalItems: getWishlistTotalItems,
    getFormattedPrice
};

exports.cartGetters = cartGetters;
exports.categoryGetters = categoryGetters;
exports.checkoutGetters = checkoutGetters;
exports.facetGetters = facetGetters;
exports.orderGetters = orderGetters;
exports.productGetters = productGetters;
exports.reviewGetters = reviewGetters;
exports.searchGetters = searchGetters;
exports.useAvailableCountries = useAvailableCountries;
exports.useAvailableFilters = useAvailableFilters;
exports.useCart = index$1;
exports.useCategory = index$d;
exports.useCheckout = useCheckout;
exports.useContent = index$c;
exports.useFacet = index$b;
exports.useForgotPassword = index;
exports.useProduct = index$a;
exports.useReview = index$9;
exports.useSearch = index$8;
exports.useStore = index$6;
exports.useUser = index$7;
exports.useUserBilling = index$5;
exports.useUserOrders = index$4;
exports.useUserShipping = index$3;
exports.useWishlist = index$2;
exports.userBillingGetters = userGetters;
exports.userGetters = userGetters$2;
exports.userShippingGetters = userGetters$1;
exports.wishlistGetters = wishlistGetters;
//# sourceMappingURL=index.cjs.js.map
