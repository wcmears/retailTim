'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core$1 = require('@vue-storefront/core');
var core = require('@apollo/client/core');
var graphql = require('graphql');
var shopifyApollo = require('@vue-storefront/shopify-apollo');

const getCountry = (context, isProduct = false, defaultLocale = 'en', curLocale = 'en') => {
    if (isProduct) {
        return curLocale === "en" ? (defaultLocale).toUpperCase() : (curLocale).toUpperCase();
    }
    return context.res.req.cookies['vsf-locale'] ? context.res.req.cookies['vsf-locale'] === "en" ? "US" : (context.res.req.cookies['vsf-locale']).toUpperCase() : "US";
};

async function getProduct(context, params, customQuery) {
    const localeInfo = params.localeInfo;
    if (params.slug) {
        let chosenVariant = [];
        if (params.selectedOptions && Object.keys(params.selectedOptions).length > 0) {
            chosenVariant = Object.entries(params.selectedOptions).map(k => ({ name: k[0], value: k[1] }));
        }
        const DEFAULT_QUERY = core.gql `query product($handle: String!, $country: CountryCode!, $selectedOptions: [SelectedOptionInput!]! ) @inContext(country: $country ) {
      productByHandle(handle: $handle){
        id
        title
        description
        descriptionHtml
        handle
        tags
        availableForSale
        totalInventory
        vendor
        seo{
          title
          description
        }
        variantBySelectedOptions(selectedOptions:$selectedOptions){
          id
          title
          sku
          availableForSale
          quantityAvailable
          image{
            altText
            originalSrc
            transformedSrc
          }
          priceV2{
            currencyCode
            amount
          }
          compareAtPriceV2{
            currencyCode
            amount
          }
        }
        options{
          id
          name
          values
        }
        collections(first:250){
          edges{
            node{
              title
              handle
            }
          }
        }
        images(first:20){
          edges{
            node{
              id
              altText
              originalSrc
              transformedSrc
            }
          }
        }
        variants(first:20){
          edges{
            node{
              id
              title
              weight
              availableForSale
              sku
              priceV2{
                amount
                currencyCode
              }
              compareAtPriceV2{
                amount
                currencyCode
              }
              image{
                id
                altText
                originalSrc
                transformedSrc
              }
              selectedOptions{
                name
                value
              }
              product{
                id
                title
                availableForSale
                handle
                description
                descriptionHtml
                images(first:20){
                  edges{
                    node{
                      id
                      altText
                      originalSrc
                      transformedSrc
                    }
                  }
                }
                productType
                options{
                  id
                  name
                  values
                }
              }
            }
          }
        }
      }
    }`;
        const variables = {
            handle: params.slug,
            country: getCountry(context, true, localeInfo.default, localeInfo.cur),
            selectedOptions: chosenVariant
        };
        const { productByHandle } = context.extendQuery(customQuery, {
            productByHandle: {
                query: DEFAULT_QUERY,
                variables
            }
        });
        return await context.client.apolloClient.query({
            query: productByHandle.query,
            variables: productByHandle.variables
        }).then((result) => {
            const collections = result.data.productByHandle.collections.edges.map((collection => collection.node));
            const images = result.data.productByHandle.images.edges.map((image => image.node));
            const variants = result.data.productByHandle.variants.edges.map((variant => variant.node));
            const newResult = {
                ...result,
                data: {
                    ...result.data,
                    productByHandle: {
                        ...result.data.productByHandle,
                        collections,
                        images,
                        variants
                    }
                }
            };
            return newResult.data.productByHandle;
        }).catch();
    }
    else if (params.related) {
        const DEFAULT_QUERY = core.gql `query GET_PRODUCT_RECOMMENDATION($productId: ID!, $country: CountryCode!) @inContext(country: $country){
      productRecommendations(productId:$productId){
        id
        title
        handle
        options{
          name
          values
        }
        totalInventory
        collections(first:250){
          edges{
            node{
              title
              handle
            }
          }
        }
        images(first:20){
          edges{
            node{
              id
              altText
              originalSrc
              transformedSrc
            }
          }
        }
        variants(first:20){
          edges{
            node{
              id
              title
              weight
              availableForSale
              sku
              priceV2{
                amount
                currencyCode
              }
              compareAtPriceV2{
                amount
                currencyCode
              }
              image{
                id
                altText
                originalSrc
                transformedSrc
              }
              selectedOptions{
                name
                value
              }
              product{
                id
                title
                availableForSale
                handle
                description
                descriptionHtml
                images(first:20){
                  edges{
                    node{
                      id
                      altText
                      originalSrc
                      transformedSrc
                    }
                  }
                }
                productType
                options{
                  name
                  values
                }
              }
            }
          }
        }
      }
    }`;
        const localeInfo = params.localeInfo;
        const payload = {
            productId: params.productId,
            country: getCountry(context, true, localeInfo.default, localeInfo.cur),
        };
        const { productRecommendations } = context.extendQuery(customQuery, {
            productRecommendations: {
                query: DEFAULT_QUERY,
                payload
            }
        });
        return await context.client.apolloClient.query({
            query: productRecommendations.query,
            variables: productRecommendations.payload
        }).then((result) => {
            if (result.data.productRecommendations && result.data.productRecommendations.length > 0) {
                const productRecommendations = [];
                for (let pr = 0; pr < result.data.productRecommendations.length; pr++) {
                    const collections = result.data.productRecommendations[pr].collections.edges.map((collection => collection.node));
                    const images = result.data.productRecommendations[pr].images.edges.map((image => image.node));
                    const variants = result.data.productRecommendations[pr].variants.edges.map((variant => variant.node));
                    delete (result.data.productRecommendations[pr].collections);
                    delete (result.data.productRecommendations[pr].images);
                    delete (result.data.productRecommendations[pr].variants);
                    productRecommendations.push({
                        ...result.data.productRecommendations[pr],
                        collections,
                        images,
                        variants
                    });
                }
                return productRecommendations;
            }
            return result.data.productRecommendations;
        });
    }
    else if (params.id) {
        return await context.client.product.fetch(params.id).then((product) => {
            return product;
        });
    }
    else if (params.ids) {
        return await context.client.product.fetchMultiple(params.ids).then((products) => {
            return products;
        });
    }
    else {
        const DEFAULT_QUERY = core.gql `query GET_PRODUCTS($country: CountryCode!, $first: Int!, $sortKey:  ProductSortKeys!, $reverse: Boolean!) @inContext(country: $country){
      products(first:$first, sortKey: $sortKey, reverse: $reverse) {
        edges{
          node{
            id
            availableForSale
            createdAt
            updatedAt
            description
            totalInventory
            descriptionHtml
            handle
            title
            productType
            vendor
            publishedAt
            onlineStoreUrl
            options{
              id
              name
              values
            }
            images(first:20){
              edges{
                node{
                  altText
                  id
                  originalSrc
                  src
                }
              }
            }
            variants(first:250){
              edges{
                node{
                  sku
                  availableForSale
                  priceV2{
                    currencyCode
                    amount
                  }
                  compareAtPriceV2{
                    amount
                    currencyCode
                  }
                  id
                  image{
                    id
                    altText
                    originalSrc
                    src
                  }
                  selectedOptions{
                    name
                    value
                  }
                }
              }
            }
            priceRange{
              minVariantPrice{
                currencyCode
                amount
              }
              maxVariantPrice{
                currencyCode
                amount
              }
            }
            images(first:20){
              edges{
                node{
                  id
                  originalSrc
                  altText
                }
              }
            }
          }
        }
      } 
    }`;
        const payload = {
            first: (params.limit ? params.limit : 20),
            sortKey: (params.sortBy ? params.sortBy : 'CREATED_AT'),
            reverse: false,
            country: getCountry(context, true, localeInfo.default, localeInfo.cur)
        };
        const { products } = context.extendQuery(customQuery, {
            products: {
                query: DEFAULT_QUERY,
                payload
            }
        });
        return await context.client.apolloClient.query({
            query: products.query,
            variables: products.payload
        }).then((result) => {
            const items = result.data.products.edges.map(item => {
                const product = {
                    ...item.node,
                    images: item.node.images.edges.map(image => image.node),
                    variants: item.node.variants.edges.map(variant => variant.node)
                };
                return product;
            });
            return items;
        });
    }
}

function getCategory(context, params) {
    // Use the built-in function
    if (params.slug !== '') {
        return context.client.collection.fetchByHandle(params.slug).then((collection) => {
            // Collection with all default fields
            return collection;
        });
    }
    else {
        return context.client.collection.fetchAll().then((collection) => {
            // Collection with all default fields
            return collection;
        });
    }
}

/* TODO: Fetch custom client directly, may be using context  */
const customerAddressDeleteMutation = (context) => {
    const id = context.client.graphQLClient.variable('id', 'ID!');
    const customerAccessToken = context.client.graphQLClient.variable('customerAccessToken', 'String!');
    return context.client.graphQLClient.mutation('customerAddressDelete', [id, customerAccessToken], (root) => {
        root.add('customerAddressDelete', { args: { id, customerAccessToken } }, (customer) => {
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
            customer.add('deletedCustomerAddressId');
        });
    });
};
const customerAddressAddMutation = (context) => {
    const address = context.client.graphQLClient.variable('address', 'MailingAddressInput!');
    const customerAccessToken = context.client.graphQLClient.variable('customerAccessToken', 'String!');
    return context.client.graphQLClient.mutation('customerAddressCreate', [customerAccessToken, address], (root) => {
        root.add('customerAddressCreate', { args: { address, customerAccessToken } }, (customer) => {
            customer.add('customerAddress', (addressInfo) => {
                addressInfo.add('id');
            });
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
        });
    });
};
const customerAddressUpdateMutation = (context) => {
    const customerAccessToken = context.client.graphQLClient.variable('customerAccessToken', 'String!');
    const id = context.client.graphQLClient.variable('id', 'ID!');
    const address = context.client.graphQLClient.variable('address', 'MailingAddressInput!');
    return context.client.graphQLClient.mutation('customerAddressUpdate', [customerAccessToken, id, address], (root) => {
        root.add('customerAddressUpdate', { args: { address, id, customerAccessToken } }, (customer) => {
            customer.add('customerAddress', (addressInfo) => {
                addressInfo.add('id');
            });
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
        });
    });
};
const editProfileMutation = (context) => {
    const customerAccessToken = context.client.graphQLClient.variable('customerAccessToken', 'String!');
    const customer = context.client.graphQLClient.variable('customer', 'CustomerUpdateInput!');
    return context.client.graphQLClient.mutation('customerUpdate', [customerAccessToken, customer], (root) => {
        root.add('customerUpdate', { args: { customerAccessToken, customer } }, (customer) => {
            customer.add('customer', (fields) => {
                fields.add('id');
                fields.add('displayName');
                fields.add('email');
                fields.add('firstName');
                fields.add('lastName');
                fields.add('phone');
            });
            customer.add('customerAccessToken', (token) => {
                token.add('accessToken');
                token.add('expiresAt');
            });
            customer.add('customerUserErrors', (error) => {
                error.add('code');
                error.add('field');
                error.add('message');
            });
        });
    });
};
const signInMutation = `mutation customerAccessTokenCreate($email: String!, $password: String!){
    customerAccessTokenCreate(input:{email: $email, password: $password}){
      customerAccessToken{
        accessToken
        expiresAt
      }
      customerUserErrors{
        code
        field
        message
      }
    }
  }`;
const signOutMutation = `mutation customerAccessTokenDelete($customerAccessToken: String!, $password: String!){
    customerAccessTokenDelete(customerAccessToken:$customerAccessToken){
      deletedAccessToken
      deletedCustomerAccessTokenId
      userErrors{
        field
        message
      }
    }
  }`;
const signUpMutation = `mutation CREATE_CUSTOMER( $input: CustomerCreateInput! ){
	customerCreate(input: $input){
		customer{
      id
    }
    customerUserErrors{
      code
			field
      message
    }
	}
}`;
const forgotPasswordMutation = `mutation RESET_PASSWORD($email: String!){
  customerRecover(email: $email){
    customerUserErrors{
      code
      field
      message
    }
  }
}`;
const changePasswordMutation = `mutation customerUpdate($customer: CustomerUpdateInput!, $customerAccessToken: String!) {
  customerUpdate(customer: $customer, customerAccessToken: $customerAccessToken) {
    customerAccessToken {
      accessToken
      expiresAt
    }
    customer {
      id
      firstName
      lastName
      email
      displayName
      acceptsMarketing
    }
    customerUserErrors {
      code
      field
      message
    }
  }
}`;

/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function editProfile(context, params) {
    const { token, profile } = params;
    const data = {
        customerAccessToken: token,
        customer: profile
    };
    // send user data to authenticate, return token if valid
    return await context.client.graphQLClient.send(editProfileMutation(context), data).then(({ model }) => {
        return model;
    });
}

function getBlogPosts(context) {
    // Use the built-in function
    const articlesQuery = context.client.graphQLClient.query((root) => {
        root.addConnection('articles', { args: { first: 20 } }, (article) => {
            article.add('title');
            article.add('handle');
            article.add('url');
            article.add('excerpt');
            article.add('publishedAt');
            article.addField('image', {}, (image) => {
                image.add('id');
                image.add('altText');
                image.add('originalSrc');
            });
            article.addField('authorV2', {}, (author) => {
                author.add('name');
                author.add('email');
            });
        });
    });
    // Call the send method with the custom query
    context.client.graphQLClient.send(articlesQuery).then(({ model }) => {
        if (model) {
            return model.articles;
        }
    });
}

function getPages(context, params) {
    // Use the built-in function
    if (params.slug) {
        const pageByHandleQuery = context.client.graphQLClient.query((root) => {
            root.add('pageByHandle', { args: { handle: params.slug } }, (pageByHandle) => {
                pageByHandle.add('id');
                pageByHandle.add('title');
                pageByHandle.add('handle');
                pageByHandle.add('url');
                pageByHandle.add('bodySummary');
                pageByHandle.add('body');
                pageByHandle.add('createdAt');
            });
        });
        // Call the send method with the custom query
        return context.client.graphQLClient.send(pageByHandleQuery).then(({ model }) => {
            return model.pageByHandle;
        });
    }
    else {
        const pagesQuery = context.client.graphQLClient.query((root) => {
            root.addConnection('pages', { args: { first: params.limit ? params.limit : 20 } }, (article) => {
                article.add('id');
                article.add('title');
                article.add('handle');
                article.add('url');
                article.add('bodySummary');
                article.add('body');
                article.add('createdAt');
            });
        });
        // Call the send method with the custom query
        return context.client.graphQLClient.send(pagesQuery).then(({ model }) => {
            if (model) {
                return model;
            }
        });
    }
}

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function updateCart(context, params, _customQuery) {
    const { currentCart, product, quantity } = params;
    // Existing Checkout ID
    const lineItemsToUpdate = [{
            id: product.id,
            quantity
        }];
    const DEFAULT_MUTATION = core.gql `mutation checkoutLineItemsUpdate($country:CountryCode, $checkoutId: ID!, $lineItems: [CheckoutLineItemUpdateInput!]! ) @inContext(country:$country){
  checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems){
    checkout{
      appliedGiftCards{
          id
          amountUsedV2{
            currencyCode
            amount
          }
          balanceV2{
            currencyCode
            amount
          }
          
        }
        completedAt
        createdAt
        currencyCode
        customAttributes{
          key
          value
        }
        discountApplications(first:20){
          edges{
            node{
              ... on DiscountCodeApplication {
                code
                allocationMethod
                targetType
                targetSelection
                value{
                  ... on MoneyV2{
                    amount
                    currencyCode
                  }
                  ... on PricingPercentageValue{
                    percentage
                  }
                }
              }
            }
          }
        }
        email
        id
        lineItems(first:250){
          edges{
            node{
              customAttributes{
                key
                value
              }
              id
              quantity
              title
              variant{
                availableForSale
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                id
                image{
                  altText
                  id
                  height
                  width
                  src
                }
                priceV2{
                  currencyCode
                  amount
                }
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                product{
                  handle
                  id
                }
                selectedOptions{
                  name
                  value
                }
                sku
                title
                unitPrice{
                  currencyCode
                  amount
                }
              }
            }
          }
        }
        lineItemsSubtotalPrice{
          currencyCode
          amount
        }
        note
        order {
          id
        }
        orderStatusUrl
        paymentDueV2{
          currencyCode
          amount
        }
        ready
        requiresShipping
        shippingAddress {
          id
        }
        shippingLine{
          handle
          priceV2{
            currencyCode
            amount
          }
          title
        }
        subtotalPriceV2{
          currencyCode
          amount
        }
        taxExempt
        taxesIncluded
        totalPriceV2{
          currencyCode
          amount
        }
        totalTaxV2{
          currencyCode
          amount
        }
        updatedAt
        webUrl
      }
    }
  }`;
    const payload = {
        lineItems: lineItemsToUpdate,
        country: getCountry(context),
        checkoutId: currentCart.id
    };
    const { checkoutLineItemsUpdate } = context.extendQuery(_customQuery, {
        checkoutLineItemsUpdate: {
            mutation: graphql.print(DEFAULT_MUTATION),
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: core.gql(checkoutLineItemsUpdate.mutation),
        variables: checkoutLineItemsUpdate.payload
    }).then((result) => {
        const discountApplications = result.data.checkoutLineItemsUpdate.checkout.discountApplications.edges.map((discountApplications => discountApplications.node));
        const lineItems = result.data.checkoutLineItemsUpdate.checkout.lineItems.edges.map((lineItem => lineItem.node));
        delete (result.data.checkoutLineItemsUpdate.checkout.lineItems);
        delete (result.data.checkoutLineItemsUpdate.checkout.discountApplications);
        result.data.checkoutLineItemsUpdate.checkout = {
            ...result.data.checkoutLineItemsUpdate.checkout,
            discountApplications,
            lineItems
        };
        return result.data.checkoutLineItemsUpdate.checkout;
    });
}

async function createCart(context, _params, _customQuery) {
    const DEFAULT_MUTATION = core.gql `mutation checkoutCreate($input: CheckoutCreateInput!) {
    checkoutCreate(input:$input){
      checkout{
        id
        webUrl
      }
      checkoutUserErrors {
          code
          field
          message
      }
    }
  }`;
    const payload = {
        input: {
            buyerIdentity: {
                countryCode: getCountry(context)
            }
        }
    };
    const { checkoutCreate } = context.extendQuery(_customQuery, {
        checkoutCreate: {
            mutation: DEFAULT_MUTATION,
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: checkoutCreate.mutation,
        variables: checkoutCreate.payload
    }).then((result) => {
        return result.data.checkoutCreate.checkout;
    });
}

async function addToCart(context, params, _customQuery) {
    const { currentCart, product, quantity, customQuery } = params;
    // Items to be add to cart
    const lineItemsToAdd = [{
            variantId: product.variantBySelectedOptions && product.variantBySelectedOptions !== null ? product.variantBySelectedOptions.id : product.variantId,
            quantity,
            customAttributes: customQuery
        }];
    const DEFAULT_MUTATION = core.gql `mutation checkoutLineItemsAdd($country:CountryCode, $checkoutId: ID!, $lineItems: [CheckoutLineItemInput!]! ) @inContext(country:$country){
  checkoutLineItemsAdd(checkoutId: $checkoutId, lineItems: $lineItems){
    checkout{
      appliedGiftCards{
          id
          amountUsedV2{
            currencyCode
            amount
          }
          balanceV2{
            currencyCode
            amount
          }
          
        }
        completedAt
        createdAt
        currencyCode
        customAttributes{
          key
          value
        }
        discountApplications(first:20){
          edges{
            node{
              ... on DiscountCodeApplication {
                code
                allocationMethod
                targetType
                targetSelection
                value{
                  ... on MoneyV2{
                    amount
                    currencyCode
                  }
                  ... on PricingPercentageValue{
                    percentage
                  }
                }
              }
            }
          }
        }
        email
        id
        lineItems(first:250){
          edges{
            node{
              customAttributes{
                key
                value
              }
              id
              quantity
              title
              variant{
                availableForSale
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                id
                image{
                  altText
                  id
                  height
                  width
                  src
                }
                priceV2{
                  currencyCode
                  amount
                }
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                product{
                  handle
                  id
                }
                selectedOptions{
                  name
                  value
                }
                sku
                title
                unitPrice{
                  currencyCode
                  amount
                }
              }
            }
          }
        }
        lineItemsSubtotalPrice{
          currencyCode
          amount
        }
        note
        order {
          id
        }
        orderStatusUrl
        paymentDueV2{
          currencyCode
          amount
        }
        ready
        requiresShipping
        shippingAddress {
          id
        }
        shippingLine{
          handle
          priceV2{
            currencyCode
            amount
          }
          title
        }
        subtotalPriceV2{
          currencyCode
          amount
        }
        taxExempt
        taxesIncluded
        totalPriceV2{
          currencyCode
          amount
        }
        totalTaxV2{
          currencyCode
          amount
        }
        updatedAt
        webUrl
      }
    }
  }`;
    const payload = {
        lineItems: lineItemsToAdd,
        country: getCountry(context),
        checkoutId: currentCart.id
    };
    const { checkoutLineItemsAdd } = context.extendQuery(customQuery, {
        checkoutLineItemsAdd: {
            mutation: DEFAULT_MUTATION,
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: checkoutLineItemsAdd.mutation,
        variables: checkoutLineItemsAdd.payload
    }).then((result) => {
        const discountApplications = result.data.checkoutLineItemsAdd.checkout.discountApplications.edges.map((discountApplications => discountApplications.node));
        const lineItems = result.data.checkoutLineItemsAdd.checkout.lineItems.edges.map((lineItem => lineItem.node));
        delete (result.data.checkoutLineItemsAdd.checkout.lineItems);
        delete (result.data.checkoutLineItemsAdd.checkout.discountApplications);
        result.data.checkoutLineItemsAdd.checkout = {
            ...result.data.checkoutLineItemsAdd.checkout,
            discountApplications,
            lineItems
        };
        return result.data.checkoutLineItemsAdd.checkout;
    });
}

async function removeFromCart(context, params, _customQuery) {
    const { currentCart, product } = params;
    // products to be remove
    const lineItemIdsToRemove = [
        product.id
    ];
    const DEFAULT_MUTATION = `mutation checkoutLineItemsRemove($country:CountryCode, $checkoutId: ID!, $lineItemIds: [ID!]!) @inContext(country:$country){
  checkoutLineItemsRemove(checkoutId: $checkoutId, lineItemIds: $lineItemIds){
    checkout{
      appliedGiftCards{
          id
          amountUsedV2{
            currencyCode
            amount
          }
          balanceV2{
            currencyCode
            amount
          }
          
        }
        completedAt
        createdAt
        currencyCode
        customAttributes{
          key
          value
        }
        discountApplications(first:20){
          edges{
            node{
              ... on DiscountCodeApplication {
                code
                allocationMethod
                targetType
                targetSelection
                value{
                  ... on MoneyV2{
                    amount
                    currencyCode
                  }
                  ... on PricingPercentageValue{
                    percentage
                  }
                }
              }
            }
          }
        }
        email
        id
        lineItems(first:250){
          edges{
            node{
              customAttributes{
                key
                value
              }
              id
              quantity
              title
              variant{
                availableForSale
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                id
                image{
                  altText
                  id
                  height
                  width
                  src
                }
                priceV2{
                  currencyCode
                  amount
                }
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                product{
                  handle
                  id
                }
                selectedOptions{
                  name
                  value
                }
                sku
                title
                unitPrice{
                  currencyCode
                  amount
                }
              }
            }
          }
        }
        lineItemsSubtotalPrice{
          currencyCode
          amount
        }
        note
        order {
          id
        }
        orderStatusUrl
        paymentDueV2{
          currencyCode
          amount
        }
        ready
        requiresShipping
        shippingAddress {
          id
        }
        shippingLine{
          handle
          priceV2{
            currencyCode
            amount
          }
          title
        }
        subtotalPriceV2{
          currencyCode
          amount
        }
        taxExempt
        taxesIncluded
        totalPriceV2{
          currencyCode
          amount
        }
        totalTaxV2{
          currencyCode
          amount
        }
        updatedAt
        webUrl
      }
    }
  }`;
    const payload = {
        lineItemIds: lineItemIdsToRemove,
        country: getCountry(context),
        checkoutId: currentCart.id
    };
    const { checkoutLineItemsRemove } = context.extendQuery(_customQuery, {
        checkoutLineItemsRemove: {
            mutation: DEFAULT_MUTATION,
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: core.gql(checkoutLineItemsRemove.mutation),
        variables: checkoutLineItemsRemove.payload
    }).then((result) => {
        const discountApplications = result.data.checkoutLineItemsRemove.checkout.discountApplications.edges.map((discountApplications => discountApplications.node));
        const lineItems = result.data.checkoutLineItemsRemove.checkout.lineItems.edges.map((lineItem => lineItem.node));
        delete (result.data.checkoutLineItemsRemove.checkout.lineItems);
        delete (result.data.checkoutLineItemsRemove.checkout.discountApplications);
        result.data.checkoutLineItemsRemove.checkout = {
            ...result.data.checkoutLineItemsRemove.checkout,
            discountApplications,
            lineItems
        };
        return result.data.checkoutLineItemsRemove.checkout;
    });
}

async function applyCoupon(context, params, _customQuery) {
    const { currentCart, couponCode } = params;
    const DEFAULT_MUTATION = core.gql `mutation APPLY_COUPON($checkoutId: ID!, $discountCode: String!, $country: CountryCode!) @inContext(country: $country ){ 
    checkoutDiscountCodeApplyV2(checkoutId: $checkoutId, discountCode: $discountCode) {
        checkout {
      		appliedGiftCards{
          id
          amountUsedV2{
            currencyCode
            amount
          }
          balanceV2{
            currencyCode
            amount
          }
          
        }
        completedAt
        createdAt
        currencyCode
        customAttributes{
          key
          value
        }
        discountApplications(first:20){
          edges{
            node{
              ... on DiscountCodeApplication {
                code
                allocationMethod
                targetType
                targetSelection
                value{
                  ... on MoneyV2{
                    amount
                    currencyCode
                  }
                  ... on PricingPercentageValue{
                    percentage
                  }
                }
              }
            }
          }
        }
        email
        id
        lineItems(first:250){
          edges{
            node{
              customAttributes{
                key
                value
              }
              id
              quantity
              title
              variant{
                availableForSale
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                id
                image{
                  altText
                  id
                  height
                  width
                  src
                }
                priceV2{
                  currencyCode
                  amount
                }
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                product{
                  handle
                  id
                }
                selectedOptions{
                  name
                  value
                }
                sku
                title
                unitPrice{
                  currencyCode
                  amount
                }
              }
            }
          }
        }
        lineItemsSubtotalPrice{
          currencyCode
          amount
        }
        note
        order {
          id
        }
        orderStatusUrl
        paymentDueV2{
          currencyCode
          amount
        }
        ready
        requiresShipping
        shippingAddress {
          id
        }
        shippingLine{
          handle
          priceV2{
            currencyCode
            amount
          }
          title
        }
        subtotalPriceV2{
          currencyCode
          amount
        }
        taxExempt
        taxesIncluded
        totalPriceV2{
          currencyCode
          amount
        }
        totalTaxV2{
          currencyCode
          amount
        }
        updatedAt
        webUrl
      }
      checkoutUserErrors {
          code
          field
          message
      }
    }
  }`;
    const payload = {
        discountCode: couponCode,
        checkoutId: currentCart.id,
        country: getCountry(context)
    };
    const { checkoutDiscountCodeApplyV2 } = context.extendQuery(_customQuery, {
        checkoutDiscountCodeApplyV2: {
            mutation: DEFAULT_MUTATION,
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: checkoutDiscountCodeApplyV2.mutation,
        variables: checkoutDiscountCodeApplyV2.payload
    }).then((result) => {
        const discountApplications = result.data.checkoutDiscountCodeApplyV2.checkout.discountApplications.edges.map((discountApplications => discountApplications.node));
        const lineItems = result.data.checkoutDiscountCodeApplyV2.checkout.lineItems.edges.map((lineItem => lineItem.node));
        const checkoutUserErrors = result.data.checkoutDiscountCodeApplyV2.checkoutUserErrors ? result.data.checkoutDiscountCodeApplyV2.checkoutUserErrors.map((UserErrors => UserErrors.message)) : [];
        delete (result.data.checkoutDiscountCodeApplyV2.checkout.lineItems);
        delete (result.data.checkoutDiscountCodeApplyV2.checkout.discountApplications);
        delete (result.data.checkoutDiscountCodeApplyV2.checkoutUserErrors);
        result.data.checkoutDiscountCodeApplyV2.checkout = {
            ...result.data.checkoutDiscountCodeApplyV2.checkout,
            discountApplications,
            lineItems,
            checkoutUserErrors,
            couponCode
        };
        return result.data.checkoutDiscountCodeApplyV2;
    });
}

// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function removeCoupon(context, params, _customQuery) {
    const { currentCart, couponCode, customQuery } = params;
    const DEFAULT_MUTATION = core.gql `mutation REMOVE_COUPON($checkoutId: ID!, $country: CountryCode!) @inContext(country: $country ){ 
    checkoutDiscountCodeRemove(checkoutId: $checkoutId) {
        checkout {
      		appliedGiftCards{
          id
          amountUsedV2{
            currencyCode
            amount
          }
          balanceV2{
            currencyCode
            amount
          }
          
        }
        completedAt
        createdAt
        currencyCode
        customAttributes{
          key
          value
        }
        discountApplications(first:20){
          edges{
            node{
              ... on DiscountCodeApplication {
                code
                allocationMethod
                targetType
                targetSelection
                value{
                  ... on MoneyV2{
                    amount
                    currencyCode
                  }
                  ... on PricingPercentageValue{
                    percentage
                  }
                }
              }
            }
          }
        }
        email
        id
        lineItems(first:250){
          edges{
            node{
              customAttributes{
                key
                value
              }
              id
              quantity
              title
              variant{
                availableForSale
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                id
                image{
                  altText
                  id
                  height
                  width
                  src
                }
                priceV2{
                  currencyCode
                  amount
                }
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                product{
                  handle
                  id
                }
                selectedOptions{
                  name
                  value
                }
                sku
                title
                unitPrice{
                  currencyCode
                  amount
                }
              }
            }
          }
        }
        lineItemsSubtotalPrice{
          currencyCode
          amount
        }
        note
        order {
          id
        }
        orderStatusUrl
        paymentDueV2{
          currencyCode
          amount
        }
        ready
        requiresShipping
        shippingAddress {
          id
        }
        shippingLine{
          handle
          priceV2{
            currencyCode
            amount
          }
          title
        }
        subtotalPriceV2{
          currencyCode
          amount
        }
        taxExempt
        taxesIncluded
        totalPriceV2{
          currencyCode
          amount
        }
        totalTaxV2{
          currencyCode
          amount
        }
        updatedAt
        webUrl
      }
      checkoutUserErrors {
          code
          field
          message
      }
    }
  }`;
    const payload = {
        checkoutId: currentCart.id,
        country: getCountry(context)
    };
    const { checkoutDiscountCodeRemove } = context.extendQuery(_customQuery, {
        checkoutDiscountCodeRemove: {
            mutation: DEFAULT_MUTATION,
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: checkoutDiscountCodeRemove.mutation,
        variables: checkoutDiscountCodeRemove.payload
    }).then((result) => {
        const discountApplications = result.data.checkoutDiscountCodeRemove.checkout.discountApplications.edges.map((discountApplications => discountApplications.node));
        const lineItems = result.data.checkoutDiscountCodeRemove.checkout.lineItems.edges.map((lineItem => lineItem.node));
        const checkoutUserErrors = result.data.checkoutDiscountCodeRemove.checkoutUserErrors ? result.data.checkoutDiscountCodeRemove.checkoutUserErrors.map((UserErrors => UserErrors.message)) : [];
        delete (result.data.checkoutDiscountCodeRemove.checkout.lineItems);
        delete (result.data.checkoutDiscountCodeRemove.checkout.discountApplications);
        delete (result.data.checkoutDiscountCodeRemove.checkoutUserErrors);
        result.data.checkoutDiscountCodeRemove.checkout = {
            ...result.data.checkoutDiscountCodeRemove.checkout,
            discountApplications,
            lineItems,
            checkoutUserErrors
        };
        return result.data.checkoutDiscountCodeRemove;
    });
}

async function signUp(context, params, customQuery) {
    const payload = {
        input: params
    };
    const { customerCreate } = context.extendQuery(customQuery, {
        customerCreate: {
            mutation: signUpMutation,
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: core.gql(customerCreate.mutation),
        variables: customerCreate.payload
    }).then((result) => {
        return result.data.customerCreate;
    });
}

async function signIn(context, params, _customQuery) {
    const { username, password } = params;
    // Listen to inputs
    const payload = {
        email: username,
        password
    };
    const { customerAccessTokenCreate } = context.extendQuery(_customQuery, {
        customerAccessTokenCreate: {
            mutation: signInMutation,
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: core.gql(customerAccessTokenCreate.mutation),
        variables: customerAccessTokenCreate.payload
    }).then((result) => {
        return result.data.customerAccessTokenCreate;
    });
}

async function signOut(context, params) {
    // Retrieve customer token
    const payload = {
        customerAccessToken: params
    };
    const { customerAccessTokenDelete } = context.extendQuery({
        customerAccessTokenDelete: {
            mutation: signOutMutation,
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: core.gql(customerAccessTokenDelete.mutation),
        variables: customerAccessTokenDelete.payload
    }).then((result) => {
        return result.data.customerAccessTokenDelete;
    });
}

async function changePassword(context, params, _customQuery) {
    const { token, newPassword } = params;
    const payload = {
        customerAccessToken: token,
        customer: {
            password: newPassword
        }
    };
    const { customerUpdate } = context.extendQuery(_customQuery, {
        customerUpdate: {
            mutation: changePasswordMutation,
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: core.gql(customerUpdate.mutation),
        variables: customerUpdate.payload
    }).then((result) => {
        return result.data;
    });
}

async function forgotPassword(context, params) {
    const { username } = params;
    const payload = {
        email: username
    };
    const { customerRecover } = context.extendQuery({
        customerRecover: {
            mutation: forgotPasswordMutation,
            payload
        }
    });
    return await context.client.apolloClient.mutate({
        mutation: core.gql(customerRecover.mutation),
        variables: customerRecover.payload
    }).then((result) => {
        return result.data.customerUserErrors;
    });
}

async function fetchCustomer(context, params, customQuery) {
    const DEFAULT_QUERY = `query customer($customerAccessToken: String!){
    customer(customerAccessToken: $customerAccessToken){
      id
      displayName
      email
      firstName
      lastName
      phone
      tags
      acceptsMarketing
	}
}`;
    // Retrieve token
    const payload = {
        customerAccessToken: params
    };
    const { customer } = context.extendQuery(customQuery, {
        customer: {
            query: DEFAULT_QUERY,
            variables: payload
        }
    });
    // send user data to authenticate, return token if valid
    return await context.client.apolloClient.query({
        query: core.gql(customer.query),
        variables: customer.variables
    }).then((result) => {
        return result.data;
    });
}

function fetchOrders(context, params) {
    const getCustomerOrders = context.client.graphQLClient.query((root) => {
        root.add('customer', { args: { customerAccessToken: params } }, (customerOrder) => {
            customerOrder.addConnection('orders', { args: { first: 20 } }, (order) => {
                order.add('id');
                order.add('name');
                order.add('orderNumber');
                order.add('processedAt');
                order.add('financialStatus');
                order.add('fulfillmentStatus');
                order.addField('currentTotalPrice', {}, (curTotPrice) => {
                    curTotPrice.add('amount');
                    curTotPrice.add('currencyCode');
                });
                order.addField('originalTotalPrice', {}, (originalTotalPrice) => {
                    originalTotalPrice.add('amount');
                    originalTotalPrice.add('currencyCode');
                });
                order.addField('originalTotalDuties', {}, (originalTotalDuties) => {
                    originalTotalDuties.add('amount');
                    originalTotalDuties.add('currencyCode');
                });
                order.addField('currentTotalTax', {}, (curTotTax) => {
                    curTotTax.add('amount');
                    curTotTax.add('currencyCode');
                });
                order.addField('currentSubtotalPrice', {}, (curSubTotPrice) => {
                    curSubTotPrice.add('amount');
                    curSubTotPrice.add('currencyCode');
                });
                order.addConnection('lineItems', { args: { first: 250 } }, (Lineitem) => {
                    Lineitem.add('title');
                    Lineitem.add('quantity');
                    Lineitem.addField('originalTotalPrice', {}, (originaldPrice) => {
                        originaldPrice.add('amount');
                        originaldPrice.add('currencyCode');
                    });
                    Lineitem.addField('variant', {}, (variant) => {
                        variant.add('sku');
                        variant.addField('product', {}, (parentProduct) => {
                            parentProduct.add('id');
                            parentProduct.add('handle');
                        });
                        variant.addField('image', {}, (parentProduct) => {
                            parentProduct.add('altText');
                            parentProduct.add('originalSrc');
                        });
                    });
                });
                order.addField('successfulFulfillments', {}, (trackingInfo) => {
                    trackingInfo.addField('trackingInfo', {}, (tracking) => {
                        tracking.add('number');
                        tracking.add('url');
                    });
                });
                order.addField('shippingAddress', {}, (saddress) => {
                    saddress.add('name');
                    saddress.add('phone');
                    saddress.add('formatted');
                });
                order.addField('totalShippingPriceV2', {}, (TotalShippingPrice) => {
                    TotalShippingPrice.add('amount');
                    TotalShippingPrice.add('currencyCode');
                });
            });
        });
    });
    return context.client.graphQLClient
        .send(getCustomerOrders)
        .then(({ model }) => {
        if (model) {
            return model;
        }
    });
}

/* eslint-disable func-names */
const addressesQuery = (_pages, token, context) => {
    return context.client.graphQLClient.query((root) => {
        root.add('customer', {
            args: {
                customerAccessToken: token
            }
        }, (customer) => {
            customer.add('id');
            customer.addConnection('addresses', { args: { first: 10 } }, function (address) {
                address.add('address1');
                address.add('address2');
                address.add('city');
                address.add('company');
                address.add('firstName');
                address.add('lastName');
                address.add('name');
                address.add('phone');
                address.add('country');
                address.add('province');
                address.add('provinceCode');
                address.add('zip');
                address.add('formattedArea');
            });
        });
    });
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function fetchAddresses(context, params, customQuery) {
    // send user data to authenticate, return token if valid
    const addresses = await context.client.graphQLClient.send(addressesQuery(10, params, context)).then(({ model }) => {
        if (model) {
            return model.customer;
        }
    });
    return addresses;
}

/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function deleteAddress(context, params) {
    const { token, AddressId } = params;
    const data = {
        id: AddressId,
        customerAccessToken: token
    };
    const deletedAddressId = await context.client.graphQLClient.send(customerAddressDeleteMutation(context), data).then(({ model }) => {
        if (model) {
            return model.customerAddressDelete;
        }
    });
    return deletedAddressId;
}

/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function addAddress(context, params) {
    const { token, address } = params;
    const data = {
        address,
        customerAccessToken: token
    };
    const addedAddressId = await context.client.graphQLClient.send(customerAddressAddMutation(context), data).then(({ model }) => {
        if (model) {
            return model.customerAddressCreate;
        }
    });
    return addedAddressId;
}

/* eslint-disable @typescript-eslint/no-unused-vars */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function updateAddress(context, params) {
    const { token, AddressId, address } = params;
    const data = {
        id: AddressId,
        address,
        customerAccessToken: token
    };
    const updatedAddressId = await context.client.graphQLClient.send(customerAddressUpdateMutation(context), data).then(({ model }) => {
        if (model) {
            return model.customerAddressUpdate;
        }
    });
    return updatedAddressId;
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function checkOut(context, checkoutId, customQuery) {
    const DEFAULT_QUERY = `query FETCH_CHECKOUT($country: CountryCode!, $id: ID!) @inContext(country: $country ) {
    node(id: $id) {
      id
      ... on Checkout {
        appliedGiftCards{
          id
          amountUsedV2{
            currencyCode
            amount
          }
          balanceV2{
            currencyCode
            amount
          }
          
        }
        completedAt
        createdAt
        currencyCode
        customAttributes{
          key
          value
        }
        discountApplications(first:20){
          edges{
            node{
              ... on DiscountCodeApplication {
                code
                allocationMethod
                targetType
                targetSelection
                value{
                  ... on MoneyV2{
                    amount
                    currencyCode
                  }
                  ... on PricingPercentageValue{
                    percentage
                  }
                }
              }
            }
          }
        }
        email
        id
        lineItems(first:250){
          edges{
            node{
              customAttributes{
                key
                value
              }
              id
              quantity
              title
              variant{
                availableForSale
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                id
                image{
                  altText
                  id
                  height
                  width
                  src
                }
                priceV2{
                  currencyCode
                  amount
                }
                compareAtPriceV2{
                  currencyCode
                  amount
                }
                product{
                  handle
                  id
                }
                selectedOptions{
                  name
                  value
                }
                sku
                title
                unitPrice{
                  currencyCode
                  amount
                }
              }
            }
          }
        }
        lineItemsSubtotalPrice{
          currencyCode
          amount
        }
        note
        order {
          id
        }
        orderStatusUrl
        paymentDueV2{
          currencyCode
          amount
        }
        ready
        requiresShipping
        shippingAddress {
          id
        }
        shippingLine{
          handle
          priceV2{
            currencyCode
            amount
          }
          title
        }
        subtotalPriceV2{
          currencyCode
          amount
        }
        taxExempt
        taxesIncluded
        totalPriceV2{
          currencyCode
          amount
        }
        totalTaxV2{
          currencyCode
          amount
        }
        updatedAt
        webUrl
      }
      }
    }`;
    const payload = {
        id: checkoutId,
        country: getCountry(context),
    };
    const { node } = context.extendQuery(customQuery, {
        node: {
            query: DEFAULT_QUERY,
            variables: payload
        }
    });
    return await context.client.apolloClient.query({
        query: core.gql(node.query),
        variables: node.variables
    }).then((result) => {
        const discountApplications = result.data.node.discountApplications.edges.map((discountApplications => discountApplications.node));
        const lineItems = result.data.node.lineItems.edges.map((lineItem => lineItem.node));
        const newResult = {
            ...result,
            data: {
                ...result.data,
                node: {
                    ...result.data.node,
                    discountApplications,
                    lineItems
                }
            }
        };
        return newResult.data.node;
    });
}

const CustomClient = require('shopify-buy/index.unoptimized.umd.min.js');
const defaultSettings = {};
const cookies = {
    cartCookieName: 'vsf-cart'
};
const onCreate = (settings) => {
    const client = CustomClient.buildClient(settings.api);
    client.apolloClient = shopifyApollo.createShopifyApollo(settings);
    return ({
        config: {
            ...defaultSettings,
            ...settings
        },
        client,
        cookies: (settings.api).cookies || cookies
    });
};
const { createApiClient } = core$1.apiClientFactory({
    onCreate,
    api: {
        getProduct,
        getCategory,
        getBlogPosts,
        getPages,
        editProfile,
        addToCart,
        updateCart,
        removeFromCart,
        applyCoupon,
        removeCoupon,
        signUp,
        signIn,
        signOut,
        changePassword,
        forgotPassword,
        fetchCustomer,
        fetchOrders,
        fetchAddresses,
        deleteAddress,
        addAddress,
        updateAddress,
        createCart,
        checkOut,
        cookies,
        ...shopifyApollo.getShopifyApolloAPIs()
    }
});

exports.createApiClient = createApiClient;
//# sourceMappingURL=index.js.map
