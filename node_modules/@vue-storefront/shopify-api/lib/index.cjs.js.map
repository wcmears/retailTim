{"version":3,"file":"index.cjs.js","sources":["../src/fragments/index.ts","../src/types/Api.ts","../src/helpers/queries/index.ts"],"sourcesContent":["export const ProductPriceFragment = `\n  fragment DefaultProductPrice on ProductPrice {\n    discounted {\n      value {\n        type\n        currencyCode\n        centAmount\n        fractionDigits\n      }\n      discount {\n        validFrom\n        validUntil\n        isActive\n        name(acceptLanguage: $acceptLanguage)\n      }\n    }\n    value {\n      type\n      currencyCode\n      centAmount\n      fractionDigits\n    }\n  }\n`;\n\nexport const AddressFragment = `\n  fragment DefaultAddress on Address {\n    id\n    title\n    firstName\n    lastName\n    streetName\n    streetNumber\n    postalCode\n    city\n    country\n    state\n    region\n    company\n    apartment\n    phone\n    mobile\n  }\n`;\n\n// TODO: Remove all address information and update PRO packages to use customQueries when this is implemented: https://github.com/DivanteLtd/vue-storefront/issues/5049\nexport const CustomerFragment = `\n  ${AddressFragment}\n  fragment DefaultCustomer on Customer {\n    version\n    firstName\n    lastName\n    email\n    addresses {\n      id\n    }\n    shippingAddresses {\n      ...DefaultAddress\n    }\n    billingAddresses {\n      ...DefaultAddress\n    }\n    defaultBillingAddressId\n    defaultShippingAddressId\n  }\n`;\n\nexport const LineItemFragment = `\n  ${ProductPriceFragment}\n  fragment DefaultLineItem on LineItem {\n    id\n    productId\n    name(acceptLanguage: $acceptLanguage)\n    productSlug(acceptLanguage: $acceptLanguage)\n    quantity\n    discountedPricePerQuantity {\n      quantity\n      discountedPrice {\n        value {\n          centAmount\n        }\n        includedDiscounts {\n          discount {\n            name(acceptLanguage: $acceptLanguage)\n            isActive\n          }\n        }\n      }\n    }\n    variant {\n      id\n      sku\n      price(currency: \"USD\") {\n        tiers {\n          value {\n            centAmount\n          }\n        }\n        value {\n          centAmount\n        }\n        discounted {\n          value {\n            centAmount\n          }\n          discount {\n            isActive\n            name(acceptLanguage: $acceptLanguage)\n          }\n        }\n      }\n      images {\n        url\n        label\n      }\n      attributesRaw {\n        name\n        value\n        attributeDefinition {\n          type {\n            name\n          }\n          label(locale: $locale)\n        }\n      }\n    }\n    price {\n      ...DefaultProductPrice\n    }\n  }\n`;\n\nexport const ShippingMethodFragment = `\n  fragment DefaultShippingMethod on ShippingMethod {\n    id\n    version\n    name\n    description\n    isDefault\n    localizedDescription(acceptLanguage: $acceptLanguage)\n    zoneRates {\n      zone {\n        id\n        name\n      }\n      shippingRates {\n        freeAbove {\n          type\n          centAmount\n        }\n        isMatching\n        price {\n          centAmount\n        }\n      }\n    }\n  }\n`;\n\nexport const CartFragment = `\n  ${AddressFragment}\n  ${CustomerFragment}\n  ${LineItemFragment}\n  ${ShippingMethodFragment}\n  fragment DefaultCart on Cart {\n    id\n    customerId\n    customerEmail\n    lineItems {\n      ...DefaultLineItem\n    }\n    totalPrice {\n      centAmount\n    }\n    shippingAddress {\n      ...DefaultAddress\n    }\n    billingAddress {\n      ...DefaultAddress\n    }\n    customer {\n      ...DefaultCustomer\n    }\n    totalPrice {\n      centAmount\n    }\n    taxedPrice {\n      totalNet {\n        centAmount\n      }\n      totalGross {\n        centAmount\n      }\n    }\n    paymentInfo {\n      payments {\n        id\n      }\n    }\n    shippingInfo {\n      price {\n        centAmount\n      }\n      shippingMethod {\n        ...DefaultShippingMethod\n      }\n    }\n    discountCodes {\n      discountCode {\n        id\n        code\n        isActive\n        validFrom\n        validUntil\n        name(acceptLanguage: $acceptLanguage)\n      }\n    }\n    refusedGifts {\n      isActive\n      validFrom\n      validUntil\n      name(acceptLanguage: $acceptLanguage)\n    }\n    custom {\n      customFieldsRaw {\n        name\n        value\n      }\n    }\n    cartState\n    version\n  }\n`;\n\nexport const OrderFragment = `\n  ${AddressFragment}\n  ${LineItemFragment}\n  fragment DefaultOrder on Order {\n    lineItems {\n      ...DefaultLineItem\n    }\n    totalPrice {\n      centAmount\n    }\n    orderState\n    id\n    orderNumber\n    version\n    createdAt\n    customerEmail\n    shipmentState\n    paymentState\n    shippingAddress {\n      ...DefaultAddress\n    }\n    billingAddress {\n      ...DefaultAddress\n    }\n    cart {\n      id\n      version\n    }\n  }\n`;\n","/* eslint-disable no-use-before-define */\nimport { GetMeParams } from '../api/getMe';\n// import { ShippingMethodData } from '../api/getShippingMethods';\nimport {\n  Cart,\n  // Order,\n  // ShippingMethod,\n  // CustomerSignInResult,\n  // Customer,\n  CartDraft,\n  ProductVariant,\n  // OrderMyCartCommand,\n  // CustomerSignMeInDraft,\n  // CustomerSignMeUpDraft,\n  // ReferenceInput,\n  // Address,\n  // LineItem,\n  // CategoryQueryResult,\n  // ProductQueryResult,\n  // Me,\n  CartQueryInterface\n} from './graphQL';\n\nexport interface ApiInstance {\n  addToCart ({ id, version }: Cart, product: ProductVariant, quantity: number, customQuery?: CustomQueryFn);\n  // applyCartCoupon (cart: Cart, discountCode: string, customQuery?: CustomQueryFn): Promise<CartResponse>;\n  createCart (cartDraft?: CartData, customQueryFn?: CustomQueryFn): Promise<{ data: CartQueryInterface }>;\n  // createMyOrderFromCart (draft: OrderMyCartCommand, customQueryFn?: CustomQueryFn): Promise<OrderMutationResponse>;\n  // customerChangeMyPassword (version: any, currentPassword: string, newPassword: string): Promise<ChangeMyPasswordResponse>;\n  // customerSignMeIn (draft: CustomerSignMeInDraft): Promise<SignInResponse>;\n  // customerSignMeUp (draft: CustomerSignMeUpDraft): Promise<SignInResponse>;\n  // customerSignOut (): Promise<void>;\n  // customerUpdateMe (currentUser, updatedUserData): Promise<any>;\n  getCart(cartId: string);\n  getCategory(params, customQueryFn?: CustomQueryFn);\n  getMe (params?: GetMeParams, customQueryFn?: CustomQueryFn);\n  // getOrders (params, customQueryFn?: CustomQueryFn): Promise<{ data: { me: Me } }>;\n  getProduct (params, customQueryFn?: CustomQueryFn);\n  // getShippingMethods (cartId?: string, customQueryFn?: CustomQueryFn): Promise<ShippingMethodData>;\n  // removeCartCoupon (cart: Cart, discountCode: ReferenceInput, customQuery?: CustomQueryFn): Promise<CartResponse>;\n  // removeFromCart (cart: Cart, product: LineItem, customQuery?: CustomQueryFn): Promise<CartResponse>;\n  // updateCart (params: UpdateCartParams, customQueryFn?: CustomQueryFn): Promise<CartResponse>;\n  // updateCartQuantity (cart: Cart, product: LineItem, customQuery?: CustomQueryFn): Promise<CartResponse>;\n  // updateShippingDetails (cart: Cart, shippingDetails: Address, customQueryFn?: CustomQueryFn): Promise<CartResponse>;\n  isGuest: () => boolean;\n}\n\nexport type CustomQueryFn<T = any> = (query: any, variables: T) => {\n  query?: any;\n  variables?: T;\n};\n\nexport interface BaseSearch {\n  limit?: number;\n  offset?: number;\n  sort?: string[];\n}\n\nexport interface ProductWhereSearch extends BaseSearch {\n  catId?: string | string[];\n  skus?: string[];\n  slug?: string;\n  id?: string;\n  filters?: Filter[];\n}\n\nexport interface Filter {\n  type: AttributeType;\n  name: string;\n  value: any;\n}\n\nexport interface FilterOption {\n  label: string;\n  value: string | number | boolean | [number, number] | [string, string];\n  selected: boolean;\n}\n\nexport interface CategoryWhereSearch extends BaseSearch {\n  catId?: string;\n  slug?: string;\n}\n\nexport interface OrderWhereSearch extends BaseSearch {\n  id?: string;\n}\n\nexport enum AttributeType {\n  STRING = 'StringAttribute',\n  DATE = 'DateAttribute',\n  DATETIME = 'DateTimeAttribute',\n  TIME = 'TimeAttribute',\n  NUMBER = 'NumberAttribute',\n  ENUM = 'EnumAttribute',\n  LOCALIZED_ENUM = 'LocalizedEnumAttribute',\n  LOCALIZED_STRING = 'LocalizedStringAttribute',\n  MONEY = 'MoneyAttribute',\n  BOOLEAN = 'BooleanAttribute'\n}\n\nexport interface CartData extends Omit<CartDraft, 'currency'> {\n  currency?: string;\n}\n","import { CustomQueryFn } from './../../types/Api';\n\nconst getCustomQuery = <T = any>(customQueryFn: CustomQueryFn<T>, params) => {\n  const { defaultQuery, defaultVariables } = params;\n  if (customQueryFn) {\n    const { query, variables } = customQueryFn(defaultQuery, defaultVariables);\n    return {\n      query: query || defaultQuery,\n      variables: variables || defaultVariables};\n  }\n  return { query: defaultQuery, variables: defaultVariables };\n};\n\nexport { getCustomQuery };\n"],"names":["AttributeType"],"mappings":";;;;AAAa,MAAA,oBAAoB,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;EAuBlC;AAEW,MAAA,eAAe,GAAG,CAAA;;;;;;;;;;;;;;;;;;EAkB7B;AAEF;AACa,MAAA,gBAAgB,GAAG,CAAA;IAC5B,eAAe,CAAA;;;;;;;;;;;;;;;;;;EAkBjB;AAEW,MAAA,gBAAgB,GAAG,CAAA;IAC5B,oBAAoB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8DtB;AAEW,MAAA,sBAAsB,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;EAyBpC;AAEW,MAAA,YAAY,GAAG,CAAA;IACxB,eAAe,CAAA;IACf,gBAAgB,CAAA;IAChB,gBAAgB,CAAA;IAChB,sBAAsB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqExB;AAEW,MAAA,aAAa,GAAG,CAAA;IACzB,eAAe,CAAA;IACf,gBAAgB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrJRA,+BAWX;AAXD,CAAA,UAAY,aAAa,EAAA;AACvB,IAAA,aAAA,CAAA,QAAA,CAAA,GAAA,iBAA0B,CAAA;AAC1B,IAAA,aAAA,CAAA,MAAA,CAAA,GAAA,eAAsB,CAAA;AACtB,IAAA,aAAA,CAAA,UAAA,CAAA,GAAA,mBAA8B,CAAA;AAC9B,IAAA,aAAA,CAAA,MAAA,CAAA,GAAA,eAAsB,CAAA;AACtB,IAAA,aAAA,CAAA,QAAA,CAAA,GAAA,iBAA0B,CAAA;AAC1B,IAAA,aAAA,CAAA,MAAA,CAAA,GAAA,eAAsB,CAAA;AACtB,IAAA,aAAA,CAAA,gBAAA,CAAA,GAAA,wBAAyC,CAAA;AACzC,IAAA,aAAA,CAAA,kBAAA,CAAA,GAAA,0BAA6C,CAAA;AAC7C,IAAA,aAAA,CAAA,OAAA,CAAA,GAAA,gBAAwB,CAAA;AACxB,IAAA,aAAA,CAAA,SAAA,CAAA,GAAA,kBAA4B,CAAA;AAC9B,CAAC,EAXWA,qBAAa,KAAbA,qBAAa,GAWxB,EAAA,CAAA,CAAA;;AChGD,MAAM,cAAc,GAAG,CAAU,aAA+B,EAAE,MAAM,KAAI;AAC1E,IAAA,MAAM,EAAE,YAAY,EAAE,gBAAgB,EAAE,GAAG,MAAM,CAAC;AAClD,IAAA,IAAI,aAAa,EAAE;AACjB,QAAA,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,aAAa,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;QAC3E,OAAO;YACL,KAAK,EAAE,KAAK,IAAI,YAAY;YAC5B,SAAS,EAAE,SAAS,IAAI,gBAAgB;SAAC,CAAC;AAC7C,KAAA;IACD,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;AAC9D;;;;;;;;;;;"}